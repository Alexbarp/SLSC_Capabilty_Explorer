// TODO: This is currently a basic implementation of registers and a few
// properties for the SLSC Module Prototype. Additional work needs to be done
// to fully exercise the module and SLSC software.
//
// We have found several areas where we think CPLD changes could make this
// register set better. If we move forward with those changes, this document
// should be updated accordingly.
//
// 1. The LoadState and LoadControl registers use opposite polarity, which is
// somewhat unintuitive, and prevents the use of a shared enum for these values
// if desired. I have renamed the bitfields so that the identify the polarity
// of the logic, but it would make sense for 1 to mean the load is active in
// both registers.
//
// 2. Rearrange the front-panel LED registers so that the control for each
// Green/Red pair can be treated as a single bitfield. This will allow us to
// use an enum to control the color of the LED as Green, Amber, or Red.
// When this is complete, we can make these physical channels, and set the
// color as an enum property for each LED.
//
// 3. The debug LED registers are currently ReadWrite, but the front panel LED
// registers are WriteOnly. Should these be the same?
//
// 4. There is a Relays register at 0x300, but the documentation for it is
// imcomplete, and it is unclear how it is to be used.
{
    "productNum": 30929, // 0x78D1
    "productName": "SLSC Module Prototype",

    "vendorNum": 4243, // 0x1093
    "vendorName": "National Instruments",
    "vendorPrefix": "NI",

    "capsVersion": "17.0.0f0",
    "capsSpecVersion": 2,
    "capsSpecOldestCompatibleVersion": 1,

    "scales": [
       {
           "name": "PolynomialThermocouple",
           "description-en": "Type J Thermocouple. https://www.omega.com/temperature/Z/pdf/z198-201.pdf",
           "forwardCoeffs": [
              // Valid for -210 to 760 degrees C
              // microvolts to degrees C
              0.0,
              1.978425e-2,
              -2.001204e-7,
              1.036969e-11,
              -2.549687e-16,
              3.585153e-21,
              -5.344285e-26,
              5.099890e-31
           ],
           "reverseCoeffs": [
              // Valid for 0 to 760 degrees C
              // degrees C to microVolts
              0.0,
              5.0381187815e1,
              3.0475836930e-2,
              -8.5681065720e-5,
              1.3228195295e-7,
              -1.7052958337e-10,
              2.0948090697e-13,
              -1.2538395336e-16,
              1.5631725697e-20
           ]
       },
       {
           "name": "PolynomialBoundaryConditions",
           "description-en": "Simple 1st order polynomial scale for testing boundary conditions",
           "forwardCoeffs": [
              3.0,
              4.0
           ],
           "reverseCoeffs": [
              -0.75,
              0.25
           ]
       },
       {
           "name": "TableRound",
           "coercion": "RoundToNearest",
           "table": [
               {"scaled": -6.0, "unscaled": -3.0},
               {"scaled": 0.0, "unscaled": 0.0},
               {"scaled": 6.0, "unscaled": 3.0}
           ]
       },
       {
           "name": "TableInterpolate",
           "coercion": "Interpolate",
           "table": [
               {"scaled": -6.0, "unscaled": -3.0},
               {"scaled": 0.0, "unscaled": 0.0},
               {"scaled": 6.0, "unscaled": 3.0}
           ]
       },
       {
           "name": "LinearDivideBy8",
           "m": 0.125,
           "b": 0.0
       },
       {
           "name": "Times2Plus2",
           "m": 2.0,
           "b": 2.0
       },
       {
           "name": "InvertBoolean",
           "m": -1.0,
           "b": 1.0
       },
       {
           "name": "TableStrict",
           "coercion": "Strict",
           "table": [
               {"scaled": -88888.568101, "unscaled": 0.0},
               {"scaled": -4.0, "unscaled": 1.0},
               {"scaled": -1.0, "unscaled": 2.0},
               {"scaled": 0.0, "unscaled": 3.0},
               {"scaled": 6.59999999999, "unscaled": 4.0},
               {"scaled": 6.6, "unscaled": 5.0},
               {"scaled": 6.60000000001, "unscaled": 6.0},
               {"scaled": 9999999999.59999, "unscaled": 7.0},
               {"scaled": 9999999999.6, "unscaled": 8.0},
               {"scaled": 9999999999.60001, "unscaled": 9.0}
           ]
       },
       {
          "name": "TableStrict4Elements",
          "coercion": "Strict",
           "table": [
               {"scaled": -3.0, "unscaled": -6.0},
               {"scaled": -2.0, "unscaled": -4.0},
               {"scaled": 0.0, "unscaled": 0.0},
               {"scaled": 1.0, "unscaled": 2.0}
          ]
       },
       {
          "name": "TableStrict12Elements",
          "coercion": "Strict",
          "table": [
               {"scaled": -3.0, "unscaled": -6.0},
               {"scaled": -2.0, "unscaled": -4.0},
               {"scaled": 0.0, "unscaled": 0.0},
               {"scaled": 1.0, "unscaled": 2.0},
               {"scaled": 2.0, "unscaled": 4.0},
               {"scaled": 3.0, "unscaled": 6.0},
               {"scaled": 4.0, "unscaled": 8.0},
               {"scaled": 5.0, "unscaled": 10.0},
               {"scaled": 6.0, "unscaled": 12.0},
               {"scaled": 7.0, "unscaled": 14.0},
               {"scaled": 8.0, "unscaled": 16.0},
               {"scaled": 9.0, "unscaled": 18.0}
          ]
       },
       {
          // Create a boolean scale that has 0.0 and 1.0 mixed in.
          "name": "TableStrictTrueFalse",
          "coercion": "Strict",
           "table": [
               {"scaled": -4.0, "unscaled": -1.0},
               {"scaled": -1.0, "unscaled": -3.0},
               {"scaled": 0.0, "unscaled": 3.0},
               {"scaled": 1.0, "unscaled": 0.0},
               {"scaled": 2.0, "unscaled": -4.0},
               {"scaled": 3.0, "unscaled": 12.0}
          ]
       },
       {
          // Create a boolean scale that has 1.0 but not 0.0 mixed in.
          "name": "TableStrictTrue",
          "coercion": "Strict",
          "table": [
               {"scaled": -4.0, "unscaled": -4.0},
               {"scaled": -1.0, "unscaled": -1.0},
               {"scaled": 1.0, "unscaled": 0.0},
               {"scaled": 2.0, "unscaled": 2.0},
               {"scaled": 3.0, "unscaled": 3.0}
          ]
       },
       {
          // Create a boolean scale that has 0.0 but not 1.0 mixed in.
          "name": "TableStrictFalse",
          "coercion": "Strict",
          "table": [
               {"scaled": -4.0, "unscaled": -4.0},
               {"scaled": -1.0, "unscaled": -1.0},
               {"scaled": 0.0, "unscaled": 0.0},
               {"scaled": 2.0, "unscaled": 2.0},
               {"scaled": 3.0, "unscaled": 3.0}
          ]
       },
       {
           "name": "LinearMillisecondToSecond",
           "m": 0.001,
           "b": 0.0
       }
    ],

   "enums": [
      {
         "name": "NI.LEDState",
         "description-en": "This enum represents the state of LED",
         "values": [
            {
               "name": "Off",
               "value": 0,
               "description-en": "The LED is off."
            },
            {
               "name": "On",
               "value": 1,
               "description-en": "The LED is on."
            }
         ]
      },
      {
         "name": "NI.EventDelay",
         "description-en": "This enum determine how long to delay before setting the event interrupt.",
         "values": [
            {
               "name": "TimeoutImmediately",
               "value": 0,
               "description-en": "Event to timeout immediately."
            },
            {
               "name": "TimeoutAfter50Millisecond",
               "value": 50,
               "description-en": "Event to timeout after 50 milliseconds."
            },
            {
               "name": "TimeoutAfter100Millisecond",
               "value": 100,
               "description-en": "Event to timeout after 100 milliseconds."
            },
            {
               "name": "TimeoutAfter150Millisecond",
               "value": 150,
               "description-en": "Event to timeout after 150 milliseconds."
            },
            {
               "name": "TimeoutAfter200Millisecond",
               "value": 200,
               "description-en": "Event to timeout after 200 milliseconds."
            },
            {
               "name": "TimeoutAfter250Millisecond",
               "value": 250,
               "description-en": "Event to timeout after 250 milliseconds."
            }
         ]
      }
   ],

    "registerMap": {
        "registers": [
            {
                "name": "EventStartRegister",
                "description-en": "Use to generate event.",
                "access": "WriteOnly",
                "address": 512,
                "size": 8,

                "bitfields": [
                    {
                        "name": "EventStart3",
                        "description-en": "Starts event counter 3",
                        "offset": 3,
                        "size": 1,
                        "strobe": true
                    },
                    {
                        "name": "EventStart2",
                        "description-en": "Starts event counter 2",
                        "offset": 2,
                        "size": 1,
                        "strobe": true
                    },
                    {
                        "name": "EventStart1",
                        "description-en": "Starts event counter 1",
                        "offset": 1,
                        "size": 1,
                        "strobe": true
                    },
                    {
                        "name": "EventStart0",
                        "description-en": "Starts event counter 0",
                        "offset": 0,
                        "size": 1,
                        "strobe": true
                    }
                ]
            },
            {
                "name": "EventCounter0",
                "description-en": "Count down counter for generating an event.",
                "access": "ReadWrite",
                "address": 528,
                "size": 8,

                "initialValue": 0,

                "bitfields": [
                    {
                        "name": "DelayInMilliseconds",
                        "offset": 0,
                        "size": 8
                    }
                ]
            },
            {
                "name": "EventCounter1",
                "description-en": "Count down counter for generating an event.",
                "access": "ReadWrite",
                "address": 530,
                "size": 8,

                "initialValue": 0,

                "bitfields": [
                    {
                        "name": "DelayInMilliseconds",
                        "offset": 0,
                        "size": 8
                    }
                ]
            },
            {
                "name": "EventCounter2",
                "description-en": "Count down counter for generating an event.",
                "access": "ReadWrite",
                "address": 532,
                "size": 8,

                "initialValue": 0,

                "bitfields": [
                    {
                        "name": "DelayInMilliseconds",
                        "offset": 0,
                        "size": 8
                    }
                ]
            },
            {
                "name": "EventCounter3",
                "description-en": "Count down counter for generating an event.",
                "access": "ReadWrite",
                "address": 534,
                "size": 8,

                "initialValue": 0,

                "bitfields": [
                    {
                        "name": "DelayInMilliseconds",
                        "offset": 0,
                        "size": 8
                    }
                ]
            },
            {
                "name": "InterruptStatus",
                "description-en": "Shows the interrupt status",
                "access": "ReadOnly",
                "address": 768,
                "size": 8,

                "bitfields": [
                    {
                        "name": "ExternalIntStatus3",
                        "description-en": "External interrupt status 3",
                        "offset": 7,
                        "size": 1
                    },
                    {
                        "name": "ExternalIntStatus2",
                        "description-en": "External interrupt status 2",
                        "offset": 6,
                        "size": 1
                    },
                    {
                        "name": "ExternalIntStatus1",
                        "description-en": "External interrupt status 1",
                        "offset": 5,
                        "size": 1
                    },
                    {
                        "name": "ExternalIntStatus0",
                        "description-en": "External interrupt status 0",
                        "offset": 4,
                        "size": 1
                    },
                    {
                        "name": "EventIntStatus3",
                        "description-en": "Event 3 interrupt status",
                        "offset": 3,
                        "size": 1
                    },
                    {
                        "name": "EventIntStatus2",
                        "description-en": "Event 2 interrupt status",
                        "offset": 2,
                        "size": 1
                    },
                    {
                        "name": "EventIntStatus1",
                        "description-en": "Event 1 interrupt status",
                        "offset": 1,
                        "size": 1
                    },
                    {
                        "name": "EventIntStatus0",
                        "description-en": "Event 0 interrupt status",
                        "offset": 0,
                        "size": 1
                    }
                ]
            },
            {
                "name": "InterruptMask",
                "description-en": "Shows the enabled interrupts",
                "access": "ReadOnly",
                "address": 769,
                "size": 8,

                "bitfields": [
                    {
                        "name": "ExternalIntMask3",
                        "description-en": "External interrupt mask 3",
                        "offset": 7,
                        "size": 1
                    },
                    {
                        "name": "ExternalIntMask2",
                        "description-en": "External interrupt mask 2",
                        "offset": 6,
                        "size": 1
                    },
                    {
                        "name": "ExternalIntMask1",
                        "description-en": "External interrupt mask 1",
                        "offset": 5,
                        "size": 1
                    },
                    {
                        "name": "ExternalIntMask0",
                        "description-en": "External interrupt mask 0",
                        "offset": 4,
                        "size": 1
                    },
                    {
                        "name": "EventIntMask3",
                        "description-en": "Event 3 interrupt mask",
                        "offset": 3,
                        "size": 1
                    },
                    {
                        "name": "EventIntMask2",
                        "description-en": "Event 2 interrupt mask",
                        "offset": 2,
                        "size": 1
                    },
                    {
                        "name": "EventIntMask1",
                        "description-en": "Event 1 interrupt mask",
                        "offset": 1,
                        "size": 1
                    },
                    {
                        "name": "EventIntMask0",
                        "description-en": "Event 0 interrupt mask",
                        "offset": 0,
                        "size": 1
                    }
                ]
            },
            {
                "name": "InterruptEnable",
                "description-en": "Enable module interrupts support",
                "access": "WriteOnly",
                "address": 770,
                "size": 8,

                "bitfields": [
                    {
                        "name": "ExternalIntEnable3",
                        "description-en": "Enable external interrupt 3",
                        "offset": 7,
                        "size": 1,
                        "strobe": true
                    },
                    {
                        "name": "ExternalIntEnable2",
                        "description-en": "Enable external interrupt 2",
                        "offset": 6,
                        "size": 1,
                        "strobe": true
                    },
                    {
                        "name": "ExternalIntEnable1",
                        "description-en": "Enable external interrupt 1",
                        "offset": 5,
                        "size": 1,
                        "strobe": true
                    },
                    {
                        "name": "ExternalIntEnable0",
                        "description-en": "Enable external interrupt 0",
                        "offset": 4,
                        "size": 1,
                        "strobe": true
                    },
                    {
                        "name": "EventIntEnable3",
                        "description-en": "Enable interrupt event 3",
                        "offset": 3,
                        "size": 1,
                        "strobe": true
                    },
                    {
                        "name": "EventIntEnable2",
                        "description-en": "Enable interrupt event 2",
                        "offset": 2,
                        "size": 1,
                        "strobe": true
                    },
                    {
                        "name": "EventIntEnable1",
                        "description-en": "Enable interrupt event 1",
                        "offset": 1,
                        "size": 1,
                        "strobe": true
                    },
                    {
                        "name": "EventIntEnable0",
                        "description-en": "Enable interrupt event 0",
                        "offset": 0,
                        "size": 1,
                        "strobe": true
                    }
                ]
            },
            {
                "name": "InterruptDisable",
                "description-en": "Disable module interrupts",
                "access": "WriteOnly",
                "address": 771,
                "size": 8,

                "bitfields": [
                    {
                        "name": "ExternalIntDisable3",
                        "description-en": "Disable external interrupt 3",
                        "offset": 7,
                        "size": 1,
                        "strobe": true
                    },
                    {
                        "name": "ExternalIntDisable2",
                        "description-en": "Disable external interrupt 2",
                        "offset": 6,
                        "size": 1,
                        "strobe": true
                    },
                    {
                        "name": "ExternalIntDisable1",
                        "description-en": "Disable external interrupt 1",
                        "offset": 5,
                        "size": 1,
                        "strobe": true
                    },
                    {
                        "name": "ExternalIntDisable0",
                        "description-en": "Disable external interrupt 0",
                        "offset": 4,
                        "size": 1,
                        "strobe": true
                    },
                    {
                        "name": "EventIntDisable3",
                        "description-en": "Disable interrupt event 3",
                        "offset": 3,
                        "size": 1,
                        "strobe": true
                    },
                    {
                        "name": "EventIntDisable2",
                        "description-en": "Disable interrupt event 2",
                        "offset": 2,
                        "size": 1,
                        "strobe": true
                    },
                    {
                        "name": "EventIntDisable1",
                        "description-en": "Disable interrupt event 1",
                        "offset": 1,
                        "size": 1,
                        "strobe": true
                    },
                    {
                        "name": "EventIntDisable0",
                        "description-en": "Disable interrupt event 0",
                        "offset": 0,
                        "size": 1,
                        "strobe": true
                    }
                ]
            },
            {
                "name": "InterruptAck",
                "description-en": "Acknowledge module interrupts",
                "access": "WriteOnly",
                "address": 772,
                "size": 8,

                "bitfields": [
                    {
                        "name": "ExternalIntAck3",
                        "description-en": "Acknowledge external interrupt 3",
                        "offset": 7,
                        "size": 1,
                        "strobe": true
                    },
                    {
                        "name": "ExternalIntAck2",
                        "description-en": "Acknowledge external interrupt 2",
                        "offset": 6,
                        "size": 1,
                        "strobe": true
                    },
                    {
                        "name": "ExternalIntAck1",
                        "description-en": "Acknowledge external interrupt 1",
                        "offset": 5,
                        "size": 1,
                        "strobe": true
                    },
                    {
                        "name": "ExternalIntAck0",
                        "description-en": "Acknowledge external interrupt 0",
                        "offset": 4,
                        "size": 1,
                        "strobe": true
                    },
                    {
                        "name": "EventIntAck3",
                        "description-en": "Acknowledge interrupt event 3",
                        "offset": 3,
                        "size": 1,
                        "strobe": true
                    },
                    {
                        "name": "EventIntAck2",
                        "description-en": "Acknowledge interrupt event 2",
                        "offset": 2,
                        "size": 1,
                        "strobe": true
                    },
                    {
                        "name": "EventIntAck1",
                        "description-en": "Acknowledge interrupt event 1",
                        "offset": 1,
                        "size": 1,
                        "strobe": true
                    },
                    {
                        "name": "EventIntAck0",
                        "description-en": "Acknowledge interrupt event 0",
                        "offset": 0,
                        "size": 1,
                        "strobe": true
                    }
                ]
            },
            {
                "name": "Revision",
                "description-en": "CPLD Date Code",
                "access": "ReadOnly",
                "address": 2,
                "size": 32,

                "bitfields": [
                    {
                        "name": "DateCode",
                        "description-en": "CPLD bitfile date code",
                        "offset": 0,
                        "size": 32
                    }
                ]
            },
            {
                "name": "FrontPanelLeds",
                "description-en": "Controls front panel LEDs",
                "access": "WriteOnly",
                "address": 1,
                "size": 64,

                "initialValue": 0,

                "bitfields": [
                    {
                        "name": "LedGreen2Enable",
                        "description-en": "Turn on LED Green 2",
                        "offset": 6,
                        "size": 1
                    },
                    {
                        "name": "LedGreen1Enable",
                        "description-en": "Turn on LED Green 1",
                        "offset": 5,
                        "size": 1
                    },
                    {
                        "name": "LedGreen0Enable",
                        "description-en": "Turn on LED Green 0",
                        "offset": 4,
                        "size": 1
                    },
                    {
                        "name": "LedRed2Enable",
                        "description-en": "Turn on LED Red 2",
                        "offset": 2,
                        "size": 1
                    },
                    {
                        "name": "LedRed1Enable",
                        "description-en": "Turn on LED Red 1",
                        "offset": 1,
                        "size": 1
                    },
                    {
                        "name": "LedRed0Enable",
                        "description-en": "Turn on LED Red 0",
                        "offset": 0,
                        "size": 1
                    }
                ]
            },
            {
                "name": "DebugScratch64",
                "description-en": "64-bit Scratch register for debugging",
                "access": "ReadWrite",
                "address": 256,
                "size": 64,

                // Set initial value so MSB and LSB are set, and each byte is unique.
                "initialValue": "17940079176890708721", // 0xF8F7F6F5F4F3F2F1

                "bitfields": [
                    {
                        "name": "Scratch64",
                        "offset": 0,
                        "size": 64
                    },
                    {
                        "name": "ScratchI64",
                        "offset": 0,
                        "size": 64,
                        "signed": true
                    },
                    {
                        "name": "Scratch32",
                        "offset": 0,
                        "size": 32
                    },
                    {
                        "name": "ScratchI32",
                        "offset": 0,
                        "size": 32,
                        "signed": true
                    },
                    {
                        "name": "Scratch16",
                        "offset": 0,
                        "size": 16
                    },
                    {
                        "name": "ScratchI16",
                        "offset": 0,
                        "size": 16,
                        "signed": true
                    },
                    {
                        "name": "Scratch8",
                        "offset": 0,
                        "size": 8
                    },
                    {
                        "name": "ScratchI8",
                        "offset": 0,
                        "size": 8,
                        "signed": true
                    },
                    {
                        "name": "ScratchBool",
                        "offset": 0,
                        "size": 1
                    }
                ]
            },
            {
                "name": "DebugDipSwitch",
                "description-en": "Reads the values of module SW1 DIP switches",
                "access": "ReadOnly",
                "address": 257,
                "size": 64,

                "bitfields": [
                    {
                        "name": "DipSwitch1",
                        "description-en": "Reports the values of SW1 DIP switch 1",
                        "offset": 7,
                        "size": 1
                    },
                    {
                        "name": "DipSwitch2",
                        "description-en": "Reports the values of SW1 DIP switch 2",
                        "offset": 6,
                        "size": 1
                    },
                    {
                        "name": "DipSwitch3",
                        "description-en": "Reports the values of SW1 DIP switch 3",
                        "offset": 5,
                        "size": 1
                    },
                    {
                        "name": "DipSwitch4",
                        "description-en": "Reports the values of SW1 DIP switch 4",
                        "offset": 4,
                        "size": 1
                    },
                    {
                        "name": "DipSwitch5",
                        "description-en": "Reports the values of SW1 DIP switch 5",
                        "offset": 3,
                        "size": 1
                    },
                    {
                        "name": "DipSwitch6",
                        "description-en": "Reports the values of SW1 DIP switch 6",
                        "offset": 2,
                        "size": 1
                    },
                    {
                        "name": "DipSwitch7",
                        "description-en": "Reports the values of SW1 DIP switch 7",
                        "offset": 1,
                        "size": 1
                    },
                    {
                        "name": "DipSwitch8",
                        "description-en": "Reports the values of SW1 DIP switch 8",
                        "offset": 0,
                        "size": 1
                    }
                ]
            },
            {
                "name": "DebugLeds",
                "description-en": "Controls the blue LEDs adjacent to the CPLD",
                "access": "ReadWrite",
                "address": 258,
                "size": 64,

                "initialValue" : 4, // DebugLed2 enabled by default

                "bitfields": [
                    {
                        "name": "DebugLed0",
                        "description-en": "Controls blue LED 0",
                        "offset": 0,
                        "size": 1,
                        "strobe": true // Set as strobe so it can be used for event testing
                    },
                    {
                        "name": "DebugLed1",
                        "description-en": "Controls blue LED 1",
                        "offset": 1,
                        "size": 1
                    },
                    {
                        "name": "DebugLed2",
                        "description-en": "Controls blue LED 2",
                        "offset": 2,
                        "size": 1
                    },
                    {
                        "name": "DebugLed3",
                        "description-en": "Controls blue LED 3",
                        "offset": 3,
                        "size": 1
                    }
                ]
            },
            {
                "name": "DebugScratch32",
                "description-en": "32-bit Scratch register for debugging",
                "access": "ReadWrite",
                "address": 280,
                "size": 32,

                // Set initial value so MSB and LSB are set, and each byte is unique.
                "initialValue": 4109628145, // 0xF4F3F2F1

                "bitfields": [
                    {
                        "name": "Scratch32",
                        "offset": 0,
                        "size": 32
                    },
                    {
                        "name": "ScratchI32",
                        "offset": 0,
                        "size": 32,
                        "signed": true
                    },
                    {
                        "name": "Scratch16",
                        "offset": 0,
                        "size": 16
                    },
                    {
                        "name": "ScratchI16",
                        "offset": 0,
                        "size": 16,
                        "signed": true
                    },
                    {
                        "name": "Scratch8",
                        "offset": 0,
                        "size": 8
                    },
                    {
                        "name": "ScratchI8",
                        "offset": 0,
                        "size": 8,
                        "signed": true
                    },
                    {
                        "name": "ScratchBool",
                        "offset": 0,
                        "size": 1
                    }
                ]
            },
            {
                "name": "DebugScratch16",
                "description-en": "16-bit Scratch register for debugging",
                "access": "ReadWrite",
                "address": 284,
                "size": 16,

                // Set initial value so MSB and LSB are set, and each byte is unique.
                "initialValue": 62193, // 0xF2F1

                "bitfields": [
                    {
                        "name": "Scratch16",
                        "offset": 0,
                        "size": 16
                    },
                    {
                        "name": "ScratchI16",
                        "offset": 0,
                        "size": 16,
                        "signed": true
                    },
                    {
                        "name": "Scratch8",
                        "offset": 0,
                        "size": 8
                    },
                    {
                        "name": "ScratchI8",
                        "offset": 0,
                        "size": 8,
                        "signed": true
                    },
                    {
                        "name": "ScratchBool",
                        "offset": 0,
                        "size": 1
                    }
                ]
            },
            {
                "name": "DebugScratch8",
                "description-en": "8-bit Scratch register for debugging",
                "access": "ReadWrite",
                "address": 286,
                "size": 8,

                // Set initial value so MSB and LSB are set.
                "initialValue": 241, // 0xF1

                "bitfields": [
                    {
                        "name": "ScratchBool",
                        "offset": 0,
                        "size": 1
                    },
                    {
                        "name": "Scratch8",
                        "offset": 0,
                        "size": 8
                    },
                    {
                        "name": "ScratchI8",
                        "offset": 0,
                        "size": 8,
                        "signed": true
                    }
                ]
            },
            {
                "name": "ComplianceTestRegister",
                "description-en": "MDK-required scratchpad register",
                "access": "ReadWrite",
                "address": 32512,
                "size": 8
            },
            {
                "name": "ComplianceTestPatternRegister",
                "description-en": "MDK-required register which should always return 0xAA55F733CC08D24B",
                "access": "ReadOnly",
                "address": 32520,
                "size": 64
            }
         ],
         "interrupts" : [
            {
               "name": "EventInt0",
               "description-en": "Event Interrupt 0",
               "enableBitfield": "InterruptEnable/EventIntEnable0",
               "disableBitfield": "InterruptDisable/EventIntDisable0",
               "ackBitfield": "InterruptAck/EventIntAck0",
               "statusBitfield": "InterruptStatus/EventIntStatus0"
            },
            {
               "name": "EventInt1",
               "description-en": "Event Interrupt 1",
               "enableBitfield": "InterruptEnable/EventIntEnable1",
               "disableBitfield": "InterruptDisable/EventIntDisable1",
               "ackBitfield": "InterruptAck/EventIntAck1",
               "statusBitfield": "InterruptStatus/EventIntStatus1"
            },
            {
               "name": "EventInt2",
               "description-en": "Event Interrupt 2",
               "enableBitfield": "InterruptEnable/EventIntEnable2",
               "disableBitfield": "InterruptDisable/EventIntDisable2",
               "ackBitfield": "InterruptAck/EventIntAck2",
               "statusBitfield": "InterruptStatus/EventIntStatus2"
            },
            {
               "name": "EventInt3",
               "description-en": "Event Interrupt 3",
               "enableBitfield": "InterruptEnable/EventIntEnable3",
               "disableBitfield": "InterruptDisable/EventIntDisable3",
               "ackBitfield": "InterruptAck/EventIntAck3",
               "statusBitfield": "InterruptStatus/EventIntStatus3"
            },
            {
               "name": "ExternalInt0",
               "description-en": "External Interrupt 0",
               "enableBitfield": "InterruptEnable/ExternalIntEnable0",
               "disableBitfield": "InterruptDisable/ExternalIntDisable0",
               "ackBitfield": "InterruptAck/ExternalIntAck0",
               "statusBitfield": "InterruptStatus/ExternalIntStatus0"
            },
            {
               "name": "ExternalInt1",
               "description-en": "External Interrupt 1",
               "enableBitfield": "InterruptEnable/ExternalIntEnable1",
               "disableBitfield": "InterruptDisable/ExternalIntDisable1",
               "ackBitfield": "InterruptAck/ExternalIntAck1",
               "statusBitfield": "InterruptStatus/ExternalIntStatus1"
            },
            {
               "name": "ExternalInt2",
               "description-en": "External Interrupt 2",
               "enableBitfield": "InterruptEnable/ExternalIntEnable2",
               "disableBitfield": "InterruptDisable/ExternalIntDisable2",
               "ackBitfield": "InterruptAck/ExternalIntAck2",
               "statusBitfield": "InterruptStatus/ExternalIntStatus2"
            },
            {
               "name": "ExternalInt3",
               "description-en": "External Interrupt 3",
               "enableBitfield": "InterruptEnable/ExternalIntEnable3",
               "disableBitfield": "InterruptDisable/ExternalIntDisable3",
               "ackBitfield": "InterruptAck/ExternalIntAck3",
               "statusBitfield": "InterruptStatus/ExternalIntStatus3"
            }
         ]
    },

    "commands": [
        {
            "name": "NI.EnableLed0Immediate",
            "description-en": "Enable LED 0 and complete immediately",
            "documentation-en": "Enable LED 0 and complete immediately (doc)",
            "startBitfield": "DebugLeds/DebugLed0"
        },
        {
            "name": "NI.EnableLed0Delay",
            "description-en": "Enable LED 0 and delay 5 second",
            "documentation-en": "Enable LED 0 and delay 5 second (doc)",
            "startBitfield": "DebugLeds/DebugLed0",
            "waitTimeInMs": 5000
        },
        {
            "name": "NI.EnableLed0Poll",
            "description-en": "Enable LED 0 and wait until DIP switch 1 enabled",
            "documentation-en": "Enable LED 0 and wait until DIP switch 1 enabled (doc)",
            "startBitfield": "DebugLeds/DebugLed0",
            "doneBitfield": "DebugDipSwitch/DipSwitch1",
            "doneTimeoutInMs": 5000
        },
        {
            "name": "NI.Event0TimerExpirationInterrupt",
            "description-en": "Start event 0 timer and wait until the expiration interrupt",
            "documentation-en": "Start event 0 timer and wait until the expiration interrupt",
            "startBitfield": "EventStartRegister/EventStart0",
            "doneInterrupt": "EventInt0",
            "doneTimeoutInMs": 5000
        },
        {
            "name": "NI.Event1TimerExpirationInterrupt",
            "description-en": "Start event 1 timer and wait until the expiration interrupt",
            "documentation-en": "Start event 1 timer and wait until the expiration interrupt",
            "startBitfield": "EventStartRegister/EventStart1",
            "doneInterrupt": "EventInt1",
            "doneTimeoutInMs": 5000
        },
        {
            "name": "NI.Event2TimerExpirationInterrupt",
            "description-en": "Start event 2 timer and wait until the expiration interrupt",
            "documentation-en": "Start event 2 timer and wait until the expiration interrupt",
            "startBitfield": "EventStartRegister/EventStart2",
            "doneInterrupt": "EventInt2",
            "doneTimeoutInMs": 5000
        },
        {
            "name": "NI.Event3TimerExpirationInterrupt",
            "description-en": "Start event 3 timer and wait until the expiration interrupt",
            "documentation-en": "Start event 3 timer and wait until the expiration interrupt",
            "startBitfield": "EventStartRegister/EventStart3",
            "doneInterrupt": "EventInt3",
            "doneTimeoutInMs": 5000
        }
    ],

    "physicalChannels": [
        {
            "name": "LED0",
            "properties": [
                {
                   "name": "NI.ChannelName",
                   "dataType": "String",
                   "value": "LED0"
                },
                {
                    "name": "NI.RedBool",
                    "dataType": "Bool",
                    "access": "WriteOnly",
                    "bitfield": "FrontPanelLeds/LedRed0Enable"
                },
                {
                    "name": "NI.GreenBool",
                    "dataType": "Bool",
                    "access": "WriteOnly",
                    "bitfield": "FrontPanelLeds/LedGreen0Enable"
                },
                {
                    "name": "NI.RedEnum",
                    "dataType": "NI.LEDState",
                    "access": "WriteOnly",
                    "bitfield": "FrontPanelLeds/LedRed0Enable"
                },
                {
                    "name": "NI.GreenEnum",
                    "dataType": "NI.LEDState",
                    "access": "WriteOnly",
                    "bitfield": "FrontPanelLeds/LedGreen0Enable"
                }
            ]
        },
        {
            "name": "LED1",
            "properties": [
                {
                   "name": "NI.ChannelName",
                   "dataType": "String",
                   "value": "LED1"
                },
                {
                    "name": "NI.RedBool",
                    "dataType": "Bool",
                    "access": "WriteOnly",
                    "bitfield": "FrontPanelLeds/LedRed1Enable"
                },
                {
                    "name": "NI.GreenBool",
                    "dataType": "Bool",
                    "access": "WriteOnly",
                    "bitfield": "FrontPanelLeds/LedGreen1Enable"
                },
                {
                    "name": "NI.RedEnum",
                    "dataType": "NI.LEDState",
                    "access": "WriteOnly",
                    "bitfield": "FrontPanelLeds/LedRed1Enable"
                },
                {
                    "name": "NI.GreenEnum",
                    "dataType": "NI.LEDState",
                    "access": "WriteOnly",
                    "bitfield": "FrontPanelLeds/LedGreen1Enable"
                }
            ]
        },
        {
            "name": "LED2",
            "properties": [
                {
                   "name": "NI.ChannelName",
                   "dataType": "String",
                   "value": "LED2"
                },
                {
                    "name": "NI.RedBool",
                    "dataType": "Bool",
                    "access": "WriteOnly",
                    "bitfield": "FrontPanelLeds/LedRed2Enable"
                },
                {
                    "name": "NI.GreenBool",
                    "dataType": "Bool",
                    "access": "WriteOnly",
                    "bitfield": "FrontPanelLeds/LedGreen2Enable"
                },
                {
                    "name": "NI.RedEnum",
                    "dataType": "NI.LEDState",
                    "access": "WriteOnly",
                    "bitfield": "FrontPanelLeds/LedRed2Enable"
                },
                {
                    "name": "NI.GreenEnum",
                    "dataType": "NI.LEDState",
                    "access": "WriteOnly",
                    "bitfield": "FrontPanelLeds/LedGreen2Enable"
                }
            ]
        },
        {
            "name": "EventCounter0",
            "properties": [
                {
                   "name": "NI.ChannelName",
                   "dataType": "String",
                   "value": "EventCounter0"
                },
                {
                    "name": "NI.EventCounter.DelayInMs",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "EventCounter0/DelayInMilliseconds",
                    "max": 255
                },
                {
                    "name": "NI.EventCounter.DelayInSec",
                     "dataType": "Double",
                     "access": "ReadWrite",
                     "bitfield": "EventCounter0/DelayInMilliseconds",
                     "scale": "LinearMillisecondToSecond",
                     "min": 0.0,
                     "max": 0.255
                },
                {
                    "name": "NI.EventCounter.DelayEnum",
                     "dataType": "NI.EventDelay",
                     "access": "ReadWrite",
                     "bitfield": "EventCounter0/DelayInMilliseconds"
                },
                {
                    "name": "NI.EventCounter.Done",
                    "dataType": "Bool",
                    "access": "ReadOnly",
                    "bitfield": "InterruptStatus/EventIntStatus0"
                },
                {
                    "name": "NI.EventCounter.Armed",
                    "dataType": "Bool",
                    "access": "ReadOnly",
                    "bitfield": "InterruptMask/EventIntMask0"
                },
                {
                    "name": "NI.EventCounter.Ack",
                    "dataType": "Bool",
                    "access": "WriteOnly",
                    "bitfield": "InterruptAck/EventIntAck0"
                },
                {
                    "name": "NI.EventCounter.Start",
                    "dataType": "Bool",
                    "access": "WriteOnly",
                    "bitfield": "EventStartRegister/EventStart0"
                }
            ],
            "commands" : [
                 {
                     "name": "NI.EventCounter.Run",
                     "description-en": "Start event timer and wait until the expiration interrupt",
                     "documentation-en": "Start event timer and wait until the expiration interrupt",
                     "startBitfield": "EventStartRegister/EventStart0",
                     "doneInterrupt": "EventInt0",
                     "doneTimeoutInMs": 5000
                 },
                 {
                     "name": "NI.EventCounter.RunAsync",
                     "description-en": "Start event timer without waiting the expiration interrupt",
                     "documentation-en": "Start event timer without waiting the expiration interrupt",
                     "startBitfield": "EventStartRegister/EventStart0"
                 },
                 {
                     "name": "NI.EventCounter.RunAndPoll",
                     "description-en": "Start event timer and poll the event IntStatus bit for completion",
                     "documentation-en": "Start event timer and poll the event IntStatus bit for completion",
                     "startBitfield": "EventStartRegister/EventStart0",
                     "doneBitfield": "InterruptStatus/EventIntStatus0",
                     "doneTimeoutInMs": 5000
                 }
            ]
        },
        {
            "name": "EventCounter1",
            "properties": [
                {
                   "name": "NI.ChannelName",
                   "dataType": "String",
                   "value": "EventCounter1"
                },
                {
                    "name": "NI.EventCounter.DelayInMs",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "EventCounter1/DelayInMilliseconds",
                    "max": 255
                },
                {
                    "name": "NI.EventCounter.DelayInSec",
                     "dataType": "Double",
                     "access": "ReadWrite",
                     "bitfield": "EventCounter1/DelayInMilliseconds",
                     "scale": "LinearMillisecondToSecond",
                     "min": 0.0,
                     "max": 0.255
                },
                {
                    "name": "NI.EventCounter.DelayEnum",
                     "dataType": "NI.EventDelay",
                     "access": "ReadWrite",
                     "bitfield": "EventCounter1/DelayInMilliseconds"
                },
                {
                    "name": "NI.EventCounter.Done",
                    "dataType": "Bool",
                    "access": "ReadOnly",
                    "bitfield": "InterruptStatus/EventIntStatus1"
                },
                {
                    "name": "NI.EventCounter.Armed",
                    "dataType": "Bool",
                    "access": "ReadOnly",
                    "bitfield": "InterruptMask/EventIntMask1"
                },
                {
                    "name": "NI.EventCounter.Ack",
                    "dataType": "Bool",
                    "access": "WriteOnly",
                    "bitfield": "InterruptAck/EventIntAck1"
                },
                {
                    "name": "NI.EventCounter.Start",
                    "dataType": "Bool",
                    "access": "WriteOnly",
                    "bitfield": "EventStartRegister/EventStart1"
                }
            ],
            "commands" : [
                 {
                     "name": "NI.EventCounter.Run",
                     "description-en": "Start event timer and wait until the expiration interrupt",
                     "documentation-en": "Start event timer and wait until the expiration interrupt",
                     "startBitfield": "EventStartRegister/EventStart1",
                     "doneInterrupt": "EventInt1",
                     "doneTimeoutInMs": 5000
                 },
                 {
                     "name": "NI.EventCounter.RunAsync",
                     "description-en": "Start event timer without waiting the expiration interrupt",
                     "documentation-en": "Start event timer without waiting the expiration interrupt",
                     "startBitfield": "EventStartRegister/EventStart1"
                 },
                 {
                     "name": "NI.EventCounter.RunAndPoll",
                     "description-en": "Start event timer and poll the event IntStatus bit for completion",
                     "documentation-en": "Start event timer and poll the event IntStatus bit for completion",
                     "startBitfield": "EventStartRegister/EventStart1",
                     "doneBitfield": "InterruptStatus/EventIntStatus1",
                     "doneTimeoutInMs": 5000
                 }
            ]
        },
        {
            "name": "EventCounter2",
            "properties": [
                {
                   "name": "NI.ChannelName",
                   "dataType": "String",
                   "value": "EventCounter2"
                },
                {
                    "name": "NI.EventCounter.DelayInMs",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "EventCounter2/DelayInMilliseconds",
                    "max": 255
                },
                {
                    "name": "NI.EventCounter.DelayInSec",
                     "dataType": "Double",
                     "access": "ReadWrite",
                     "bitfield": "EventCounter2/DelayInMilliseconds",
                     "scale": "LinearMillisecondToSecond",
                     "min": 0.0,
                     "max": 0.255
                },
                {
                    "name": "NI.EventCounter.DelayEnum",
                     "dataType": "NI.EventDelay",
                     "access": "ReadWrite",
                     "bitfield": "EventCounter2/DelayInMilliseconds"
                },
                {
                    "name": "NI.EventCounter.Done",
                    "dataType": "Bool",
                    "access": "ReadOnly",
                    "bitfield": "InterruptStatus/EventIntStatus2"
                },
                {
                    "name": "NI.EventCounter.Armed",
                    "dataType": "Bool",
                    "access": "ReadOnly",
                    "bitfield": "InterruptMask/EventIntMask2"
                },
                {
                    "name": "NI.EventCounter.Ack",
                    "dataType": "Bool",
                    "access": "WriteOnly",
                    "bitfield": "InterruptAck/EventIntAck2"
                },
                {
                    "name": "NI.EventCounter.Start",
                    "dataType": "Bool",
                    "access": "WriteOnly",
                    "bitfield": "EventStartRegister/EventStart2"
                }
            ],
            "commands" : [
                 {
                     "name": "NI.EventCounter.Run",
                     "description-en": "Start event timer and wait until the expiration interrupt",
                     "documentation-en": "Start event timer and wait until the expiration interrupt",
                     "startBitfield": "EventStartRegister/EventStart2",
                     "doneInterrupt": "EventInt2",
                     "doneTimeoutInMs": 5000
                 },
                 {
                     "name": "NI.EventCounter.RunAsync",
                     "description-en": "Start event timer without waiting the expiration interrupt",
                     "documentation-en": "Start event timer without waiting the expiration interrupt",
                     "startBitfield": "EventStartRegister/EventStart2"
                 },
                 {
                     "name": "NI.EventCounter.RunAndPoll",
                     "description-en": "Start event timer and poll the event IntStatus bit for completion",
                     "documentation-en": "Start event timer and poll the event IntStatus bit for completion",
                     "startBitfield": "EventStartRegister/EventStart2",
                     "doneBitfield": "InterruptStatus/EventIntStatus2",
                     "doneTimeoutInMs": 5000
                 }
            ]
        },
        {
            "name": "EventCounter3",
            "properties": [
                {
                   "name": "NI.ChannelName",
                   "dataType": "String",
                   "value": "EventCounter3"
                },
                {
                    "name": "NI.EventCounter.DelayInMs",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "EventCounter3/DelayInMilliseconds",
                    "max": 255
                },
                {
                    "name": "NI.EventCounter.DelayInSec",
                     "dataType": "Double",
                     "access": "ReadWrite",
                     "bitfield": "EventCounter3/DelayInMilliseconds",
                     "scale": "LinearMillisecondToSecond",
                     "min": 0.0,
                     "max": 0.255
                },
                {
                    "name": "NI.EventCounter.DelayEnum",
                     "dataType": "NI.EventDelay",
                     "access": "ReadWrite",
                     "bitfield": "EventCounter3/DelayInMilliseconds"
                },
                {
                    "name": "NI.EventCounter.Done",
                    "dataType": "Bool",
                    "access": "ReadOnly",
                    "bitfield": "InterruptStatus/EventIntStatus3"
                },
                {
                    "name": "NI.EventCounter.Armed",
                    "dataType": "Bool",
                    "access": "ReadOnly",
                    "bitfield": "InterruptMask/EventIntMask3"
                },
                {
                    "name": "NI.EventCounter.Ack",
                    "dataType": "Bool",
                    "access": "WriteOnly",
                    "bitfield": "InterruptAck/EventIntAck3"
                },
                {
                    "name": "NI.EventCounter.Start",
                    "dataType": "Bool",
                    "access": "WriteOnly",
                    "bitfield": "EventStartRegister/EventStart3"
                }
            ],
            "commands" : [
                 {
                     "name": "NI.EventCounter.Run",
                     "description-en": "Start event timer and wait until the expiration interrupt",
                     "documentation-en": "Start event timer and wait until the expiration interrupt",
                     "startBitfield": "EventStartRegister/EventStart3",
                     "doneInterrupt": "EventInt3",
                     "doneTimeoutInMs": 5000
                 },
                 {
                     "name": "NI.EventCounter.RunAsync",
                     "description-en": "Start event timer without waiting the expiration interrupt",
                     "documentation-en": "Start event timer without waiting the expiration interrupt",
                     "startBitfield": "EventStartRegister/EventStart3"
                 },
                 {
                     "name": "NI.EventCounter.RunAndPoll",
                     "description-en": "Start event timer and poll the event IntStatus bit for completion",
                     "documentation-en": "Start event timer and poll the event IntStatus bit for completion",
                     "startBitfield": "EventStartRegister/EventStart3",
                     "doneBitfield": "InterruptStatus/EventIntStatus3",
                     "doneTimeoutInMs": 5000
                 }
            ]
        },
        {
            "name": "ExternalInterrupt0",
            "properties": [
                {
                   "name": "NI.ChannelName",
                   "dataType": "String",
                   "value": "ExternalInterrupt0"
                },
                {
                    "name": "NI.ExternalInterrupt.Done",
                    "dataType": "Bool",
                    "access": "ReadOnly",
                    "bitfield": "InterruptStatus/ExternalIntStatus0"
                },
                {
                    "name": "NI.ExternalInterrupt.Armed",
                    "dataType": "Bool",
                    "access": "ReadOnly",
                    "bitfield": "InterruptMask/ExternalIntMask0"
                },
                {
                    "name": "NI.ExternalInterrupt.Enable",
                    "dataType": "Bool",
                    "access": "WriteOnly",
                    "bitfield": "InterruptEnable/ExternalIntEnable0"
                },
                {
                    "name": "NI.ExternalInterrupt.Disable",
                    "dataType": "Bool",
                    "access": "WriteOnly",
                    "bitfield": "InterruptDisable/ExternalIntDisable0"
                },
                {
                    "name": "NI.ExternalInterrupt.Ack",
                    "dataType": "Bool",
                    "access": "WriteOnly",
                    "bitfield": "InterruptAck/ExternalIntAck0"
                }
            ],
            "commands" : [
                 {
                     "name": "NI.ExternalInterrupt.Wait",
                     "description-en": "Wait for the external interrupt",
                     "documentation-en": "Wait for the external interrupt",
                     "startBitfield": "InterruptAck/ExternalIntAck0", // use ack as dummy start
                     "doneInterrupt": "ExternalInt0",
                     "doneTimeoutInMs": 60000
                 },
                 {
                     "name": "NI.ExternalInterrupt.Poll",
                     "description-en": "Poll for the external interrupt line to be asserted",
                     "documentation-en": "Poll for the external interrupt line to be asserted",
                     "startBitfield": "InterruptAck/ExternalIntAck0", // use ack as dummy start
                     "doneBitfield": "InterruptStatus/ExternalIntStatus0",
                     "doneTimeoutInMs": 60000
                 }
            ]
        },
        {
            "name": "ExternalInterrupt1",
            "properties": [
                {
                   "name": "NI.ChannelName",
                   "dataType": "String",
                   "value": "ExternalInterrupt1"
                },
                {
                    "name": "NI.ExternalInterrupt.Done",
                    "dataType": "Bool",
                    "access": "ReadOnly",
                    "bitfield": "InterruptStatus/ExternalIntStatus1"
                },
                {
                    "name": "NI.ExternalInterrupt.Armed",
                    "dataType": "Bool",
                    "access": "ReadOnly",
                    "bitfield": "InterruptMask/ExternalIntMask1"
                },
                {
                    "name": "NI.ExternalInterrupt.Enable",
                    "dataType": "Bool",
                    "access": "WriteOnly",
                    "bitfield": "InterruptEnable/ExternalIntEnable1"
                },
                {
                    "name": "NI.ExternalInterrupt.Disable",
                    "dataType": "Bool",
                    "access": "WriteOnly",
                    "bitfield": "InterruptDisable/ExternalIntDisable1"
                },
                {
                    "name": "NI.ExternalInterrupt.Ack",
                    "dataType": "Bool",
                    "access": "WriteOnly",
                    "bitfield": "InterruptAck/ExternalIntAck1"
                }
            ],
            "commands" : [
                 {
                     "name": "NI.ExternalInterrupt.Wait",
                     "description-en": "Wait for the external interrupt",
                     "documentation-en": "Wait for the external interrupt",
                     "startBitfield": "InterruptAck/ExternalIntAck1", // use ack as dummy start
                     "doneInterrupt": "ExternalInt1",
                     "doneTimeoutInMs": 60000
                 },
                 {
                     "name": "NI.ExternalInterrupt.Poll",
                     "description-en": "Poll for the external interrupt line to be asserted",
                     "documentation-en": "Poll for the external interrupt line to be asserted",
                     "startBitfield": "InterruptAck/ExternalIntAck1", // use ack as dummy start
                     "doneBitfield": "InterruptStatus/ExternalIntStatus1",
                     "doneTimeoutInMs": 60000
                 }
            ]
        },
        {
            "name": "ExternalInterrupt2",
            "properties": [
                {
                   "name": "NI.ChannelName",
                   "dataType": "String",
                   "value": "ExternalInterrupt2"
                },
                {
                    "name": "NI.ExternalInterrupt.Done",
                    "dataType": "Bool",
                    "access": "ReadOnly",
                    "bitfield": "InterruptStatus/ExternalIntStatus2"
                },
                {
                    "name": "NI.ExternalInterrupt.Armed",
                    "dataType": "Bool",
                    "access": "ReadOnly",
                    "bitfield": "InterruptMask/ExternalIntMask2"
                },
                {
                    "name": "NI.ExternalInterrupt.Enable",
                    "dataType": "Bool",
                    "access": "WriteOnly",
                    "bitfield": "InterruptEnable/ExternalIntEnable2"
                },
                {
                    "name": "NI.ExternalInterrupt.Disable",
                    "dataType": "Bool",
                    "access": "WriteOnly",
                    "bitfield": "InterruptDisable/ExternalIntDisable2"
                },
                {
                    "name": "NI.ExternalInterrupt.Ack",
                    "dataType": "Bool",
                    "access": "WriteOnly",
                    "bitfield": "InterruptAck/ExternalIntAck2"
                }
            ],
            "commands" : [
                 {
                     "name": "NI.ExternalInterrupt.Wait",
                     "description-en": "Wait for the external interrupt",
                     "documentation-en": "Wait for the external interrupt",
                     "startBitfield": "InterruptAck/ExternalIntAck2", // use ack as dummy start
                     "doneInterrupt": "ExternalInt2",
                     "doneTimeoutInMs": 60000
                 },
                 {
                     "name": "NI.ExternalInterrupt.Poll",
                     "description-en": "Poll for the external interrupt line to be asserted",
                     "documentation-en": "Poll for the external interrupt line to be asserted",
                     "startBitfield": "InterruptAck/ExternalIntAck2", // use ack as dummy start
                     "doneBitfield": "InterruptStatus/ExternalIntStatus2",
                     "doneTimeoutInMs": 60000
                 }
            ]
        },
        {
            "name": "ExternalInterrupt3",
            "properties": [
                {
                   "name": "NI.ChannelName",
                   "dataType": "String",
                   "value": "ExternalInterrupt3"
                },
                {
                    "name": "NI.ExternalInterrupt.Done",
                    "dataType": "Bool",
                    "access": "ReadOnly",
                    "bitfield": "InterruptStatus/ExternalIntStatus3"
                },
                {
                    "name": "NI.ExternalInterrupt.Armed",
                    "dataType": "Bool",
                    "access": "ReadOnly",
                    "bitfield": "InterruptMask/ExternalIntMask3"
                },
                {
                    "name": "NI.ExternalInterrupt.Enable",
                    "dataType": "Bool",
                    "access": "WriteOnly",
                    "bitfield": "InterruptEnable/ExternalIntEnable3"
                },
                {
                    "name": "NI.ExternalInterrupt.Disable",
                    "dataType": "Bool",
                    "access": "WriteOnly",
                    "bitfield": "InterruptDisable/ExternalIntDisable3"
                },
                {
                    "name": "NI.ExternalInterrupt.Ack",
                    "dataType": "Bool",
                    "access": "WriteOnly",
                    "bitfield": "InterruptAck/ExternalIntAck3"
                }
            ],
            "commands" : [
                 {
                     "name": "NI.ExternalInterrupt.Wait",
                     "description-en": "Wait for the external interrupt",
                     "documentation-en": "Wait for the external interrupt",
                     "startBitfield": "InterruptAck/ExternalIntAck3", // use ack as dummy start
                     "doneInterrupt": "ExternalInt3",
                     "doneTimeoutInMs": 60000
                 },
                 {
                     "name": "NI.ExternalInterrupt.Poll",
                     "description-en": "Poll for the external interrupt line to be asserted",
                     "documentation-en": "Poll for the external interrupt line to be asserted",
                     "startBitfield": "InterruptAck/ExternalIntAck3", // use ack as dummy start
                     "doneBitfield": "InterruptStatus/ExternalIntStatus3",
                     "doneTimeoutInMs": 60000
                 }
            ]
        },
        {
            "name": "Scratchpad/Size_64",
            "description-en": "Channel for testing a single slash in channel names",
            "properties": [
                {
                   "name": "NI.ChannelName",
                   "dataType": "String",
                   "value": "Scratchpad/64"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64",
                    "description-en": "use 64-bit Scratchpad as UInt64",
                    "documentation-en": "Read write 64-bit scratchpad with UInt64 type",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/Scratch64"
                }
            ]
        },
        {
            "name": "Scratchpad/Copy2/Size_64",
            "description-en": "Channel for testing multiple slashes in channel names",
            "properties": [
                {
                   "name": "NI.ChannelName",
                   "dataType": "String",
                   "value": "Scratchpad/Copy2/64"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64",
                    "description-en": "use 64-bit Scratchpad as UInt64",
                    "documentation-en": "Read write 64-bit scratchpad with UInt64 type",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/Scratch64"
                }
            ]
        },
        {
            "name": "Scratchpad64",
            "properties": [
                {
                   "name": "NI.ChannelName",
                   "dataType": "String",
                   "value": "Scratchpad64"
                },
                {
                    "name": "NI.Scratchpad.RegisterSize",
                    "description-en": "Indicates the width of the register backing this physical channel",
                    "dataType": "Int32",
                    "value": 64
                },
                {
                    "name": "NI.Scratchpad.AsBool",
                    "description-en": "use 64-bit Scratchpad as Bool",
                    "documentation-en": "Read write 64-bit scratchpad with Bool value",
                    "dataType": "Bool",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchBool"
                },
                {
                    "name": "NI.Scratchpad.AsBool.U64",
                    "description-en": "registerSize=64, bitfieldSize=64, dataType=Bool",
                    "documentation-en": "Read write 64-bit scratchpad with U64 range as Bool",
                    "dataType": "Bool",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/Scratch64"
                },
                {
                    "name": "NI.Scratchpad.AsBool.I64",
                    "description-en": "registerSize=64, bitfieldSize=64, dataType=Bool",
                    "documentation-en": "Read write 64-bit scratchpad with I64 range as Bool",
                    "dataType": "Bool",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI64"
                },
                {
                    "name": "NI.Scratchpad.AsBool.U32",
                    "description-en": "registerSize=64, bitfieldSize=32, dataType=Bool",
                    "documentation-en": "Read write 64-bit scratchpad with U32 range as Bool",
                    "dataType": "Bool",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/Scratch32"
                },
                {
                    "name": "NI.Scratchpad.AsBool.I32",
                    "description-en": "registerSize=64, bitfieldSize=32, dataType=Bool",
                    "documentation-en": "Read write 64-bit scratchpad with I32 range as Bool",
                    "dataType": "Bool",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI32"
                },
                {
                    "name": "NI.Scratchpad.AsBool.U16",
                    "description-en": "registerSize=64, bitfieldSize=16, dataType=Bool",
                    "documentation-en": "Read write 64-bit scratchpad with U16 range as Bool",
                    "dataType": "Bool",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/Scratch16"
                },
                {
                    "name": "NI.Scratchpad.AsBool.I16",
                    "description-en": "registerSize=64, bitfieldSize=16, dataType=Bool",
                    "documentation-en": "Read write 64-bit scratchpad with I16 range as Bool",
                    "dataType": "Bool",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI16"
                },
                {
                    "name": "NI.Scratchpad.AsBool.U8",
                    "description-en": "registerSize=64, bitfieldSize=8, dataType=Bool",
                    "documentation-en": "Read write 64-bit scratchpad with U8 range as Bool",
                    "dataType": "Bool",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/Scratch8"
                },
                {
                    "name": "NI.Scratchpad.AsBool.I8",
                    "description-en": "registerSize=64, bitfieldSize=8, dataType=Bool",
                    "documentation-en": "Read write 64-bit scratchpad with I8 range as Bool",
                    "dataType": "Bool",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI8"
                },
        // Scale properties used by Skynet test
                {
                    "name": "NI.Scratchpad.AsBool.InvertBoolean",
                    "dataType": "Bool",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchBool",
                    "scale": "InvertBoolean"
                },
                {
                    "name": "NI.Scratchpad.AsBool.TableStrictTrueFalse",
                    "dataType": "Bool",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI64",
                    "scale": "TableStrictTrueFalse"
                },
                {
                    "name": "NI.Scratchpad.AsBool.TableStrictFalse",
                    "dataType": "Bool",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI64",
                    "scale": "TableStrictFalse"
                },
                {
                    "name": "NI.Scratchpad.AsBool.TableStrictTrue",
                    "dataType": "Bool",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI64",
                    "scale": "TableStrictTrue"
                },
                {
                    "name": "NI.Scratchpad.AsBool.Bool",
                    "description-en": "registerSize=64, bitfieldSize=1, dataType=Bool",
                    "documentation-en": "Read write 64-bit scratchpad with 1 bit range as Bool",
                    "dataType": "Bool",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchBool"
                },
                {
                    "name": "NI.Scratchpad.AsDouble",
                    "description-en": "use 64-bit Scratchpad as Double",
                    "documentation-en": "Read write 64-bit scratchpad with Double value",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI64"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.U64",
                    "description-en": "registerSize=64, bitfieldSize=64, dataType=Double",
                    "documentation-en": "Read write 64-bit scratchpad with U64 range as Double",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/Scratch64"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.I64",
                    "description-en": "registerSize=64, bitfieldSize=64, dataType=Double",
                    "documentation-en": "Read write 64-bit scratchpad with I64 range as Double",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI64"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.U32",
                    "description-en": "registerSize=64, bitfieldSize=32, dataType=Double",
                    "documentation-en": "Read write 64-bit scratchpad with U32 range as Double",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/Scratch32"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.I32",
                    "description-en": "registerSize=64, bitfieldSize=32, dataType=Double",
                    "documentation-en": "Read write 64-bit scratchpad with I32 range as Double",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI32"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.U16",
                    "description-en": "registerSize=64, bitfieldSize=16, dataType=Double",
                    "documentation-en": "Read write 64-bit scratchpad with U16 range as Double",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/Scratch16"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.I16",
                    "description-en": "registerSize=64, bitfieldSize=16, dataType=Double",
                    "documentation-en": "Read write 64-bit scratchpad with I16 range as Double",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI16"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.U8",
                    "description-en": "registerSize=64, bitfieldSize=8, dataType=Double",
                    "documentation-en": "Read write 64-bit scratchpad with U8 range as Double",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/Scratch8"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.I8",
                    "description-en": "registerSize=64, bitfieldSize=8, dataType=Double",
                    "documentation-en": "Read write 64-bit scratchpad with I8 range as Double",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI8"
                },
        // Scale properties used by Skynet test
                {
                    "name": "NI.Scratchpad.AsDouble.TableStrict",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI64",
                    "scale": "TableStrict"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.TableStrict12Elements",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI64",
                    "scale": "TableStrict12Elements"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.TableRound",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI64",
                    "scale": "TableRound"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.TableInterpolate",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI64",
                    "scale": "TableInterpolate"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.LinearDivideBy8",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI64",
                    "scale": "LinearDivideBy8"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.Times2Plus2",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI64",
                    "scale": "Times2Plus2"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.PolynomialThermocouple",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI64",
                    "scale": "PolynomialThermocouple",
                    "min": 0,
                    "max": 760
                },
                {
                    "name": "NI.Scratchpad.AsDouble.PolynomialBoundaryConditions",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI64",
                    "scale": "PolynomialBoundaryConditions"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.Bool",
                    "description-en": "registerSize=64, bitfieldSize=1, dataType=Double",
                    "documentation-en": "Read write 64-bit scratchpad with 1 bit range as Double",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchBool"
                },
                {
                    "name": "NI.Scratchpad.AsInt32",
                    "description-en": "use 64-bit Scratchpad as Int32",
                    "documentation-en": "Read write 64-bit scratchpad with Int32 value",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI32"
                },
                {
                    "name": "NI.Scratchpad.AsInt32.U64",
                    "description-en": "registerSize=64, bitfieldSize=64, dataType=Int32",
                    "documentation-en": "Read write 64-bit scratchpad with U64 range as Int32",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/Scratch64"
                },
                {
                    "name": "NI.Scratchpad.AsInt32.I64",
                    "description-en": "registerSize=64, bitfieldSize=64, dataType=Int32",
                    "documentation-en": "Read write 64-bit scratchpad with I64 range as Int32",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI64"
                },
                {
                    "name": "NI.Scratchpad.AsInt32.U32",
                    "description-en": "registerSize=64, bitfieldSize=32, dataType=Int32",
                    "documentation-en": "Read write 64-bit scratchpad with U32 range as Int32",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/Scratch32"
                },
                {
                    "name": "NI.Scratchpad.AsInt32.I32",
                    "description-en": "registerSize=64, bitfieldSize=32, dataType=Int32",
                    "documentation-en": "Read write 64-bit scratchpad with I32 range as Int32",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI32"
                },
                {
                    "name": "NI.Scratchpad.AsInt32.U16",
                    "description-en": "registerSize=64, bitfieldSize=16, dataType=Int32",
                    "documentation-en": "Read write 64-bit scratchpad with U16 range as Int32",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/Scratch16"
                },
                {
                    "name": "NI.Scratchpad.AsInt32.I16",
                    "description-en": "registerSize=64, bitfieldSize=16, dataType=Int32",
                    "documentation-en": "Read write 64-bit scratchpad with I16 range as Int32",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI16"
                },
                {
                    "name": "NI.Scratchpad.AsInt32.U8",
                    "description-en": "registerSize=64, bitfieldSize=8, dataType=Int32",
                    "documentation-en": "Read write 64-bit scratchpad with U8 range as Int32",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/Scratch8"
                },
                {
                    "name": "NI.Scratchpad.AsInt32.I8",
                    "description-en": "registerSize=64, bitfieldSize=8, dataType=Int32",
                    "documentation-en": "Read write 64-bit scratchpad with I8 range as Int32",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI8"
                },
        // Scale properties used by Skynet test
                {
                    "name": "NI.Scratchpad.AsInt32.TableStrict12Elements",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI32",
                    "scale": "TableStrict12Elements"
                },
                {
                    "name": "NI.Scratchpad.AsInt32.TableRound",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI32",
                    "scale": "TableRound"
                },
                {
                    "name": "NI.Scratchpad.AsInt32.TableInterpolate",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI32",
                    "scale": "TableInterpolate"
                },
                {
                    "name": "NI.Scratchpad.AsInt32.LinearDivideBy8",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI32",
                    "scale": "LinearDivideBy8"
                },
                {
                    "name": "NI.Scratchpad.AsInt32.Times2Plus2",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI32",
                    "scale": "Times2Plus2"
                },
                {
                    "name": "NI.Scratchpad.AsInt32.PolynomialThermocouple",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI32",
                    "scale": "PolynomialThermocouple",
                    "min": 0,
                    "max": 760
                },
                {
                    "name": "NI.Scratchpad.AsInt32.PolynomialBoundaryConditions",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI32",
                    "scale": "PolynomialBoundaryConditions"
                },
                {
                    "name": "NI.Scratchpad.AsInt32.Bool",
                    "description-en": "registerSize=64, bitfieldSize=1, dataType=Int32",
                    "documentation-en": "Read write 64-bit scratchpad with 1 bit range as Int32",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchBool"
                },
                {
                    "name": "NI.Scratchpad.AsInt64",
                    "description-en": "use 64-bit Scratchpad as Int64",
                    "documentation-en": "Read write 64-bit scratchpad with Int64 value",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI64"
                },
                {
                    "name": "NI.Scratchpad.AsInt64.U64",
                    "description-en": "registerSize=64, bitfieldSize=64, dataType=Int64",
                    "documentation-en": "Read write 64-bit scratchpad with U64 range as Int64",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/Scratch64"
                },
                {
                    "name": "NI.Scratchpad.AsInt64.I64",
                    "description-en": "registerSize=64, bitfieldSize=64, dataType=Int64",
                    "documentation-en": "Read write 64-bit scratchpad with I64 range as Int64",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI64"
                },
                {
                    "name": "NI.Scratchpad.AsInt64.U32",
                    "description-en": "registerSize=64, bitfieldSize=32, dataType=Int64",
                    "documentation-en": "Read write 64-bit scratchpad with U32 range as Int64",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/Scratch32"
                },
                {
                    "name": "NI.Scratchpad.AsInt64.I32",
                    "description-en": "registerSize=64, bitfieldSize=32, dataType=Int64",
                    "documentation-en": "Read write 64-bit scratchpad with I32 range as Int64",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI32"
                },
                {
                    "name": "NI.Scratchpad.AsInt64.U16",
                    "description-en": "registerSize=64, bitfieldSize=16, dataType=Int64",
                    "documentation-en": "Read write 64-bit scratchpad with U16 range as Int64",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/Scratch16"
                },
                {
                    "name": "NI.Scratchpad.AsInt64.I16",
                    "description-en": "registerSize=64, bitfieldSize=16, dataType=Int64",
                    "documentation-en": "Read write 64-bit scratchpad with I16 range as Int64",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI16"
                },
                {
                    "name": "NI.Scratchpad.AsInt64.U8",
                    "description-en": "registerSize=64, bitfieldSize=8, dataType=Int64",
                    "documentation-en": "Read write 64-bit scratchpad with U8 range as Int64",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/Scratch8"
                },
                {
                    "name": "NI.Scratchpad.AsInt64.I8",
                    "description-en": "registerSize=64, bitfieldSize=8, dataType=Int64",
                    "documentation-en": "Read write 64-bit scratchpad with I8 range as Int64",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI8"
                },
        // Scale properties used by Skynet test
                {
                    "name": "NI.Scratchpad.AsInt64.TableStrict12Elements",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI64",
                    "scale": "TableStrict12Elements"
                },
                {
                    "name": "NI.Scratchpad.AsInt64.TableRound",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI64",
                    "scale": "TableRound"
                },
                {
                    "name": "NI.Scratchpad.AsInt64.TableInterpolate",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI64",
                    "scale": "TableInterpolate"
                },
                {
                    "name": "NI.Scratchpad.AsInt64.LinearDivideBy8",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI64",
                    "scale": "LinearDivideBy8"
                },
                {
                    "name": "NI.Scratchpad.AsInt64.Times2Plus2",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI64",
                    "scale": "Times2Plus2"
                },
                {
                    "name": "NI.Scratchpad.AsInt64.PolynomialThermocouple",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI64",
                    "scale": "PolynomialThermocouple",
                    "min": 0,
                    "max": 760
                },
                {
                    "name": "NI.Scratchpad.AsInt64.PolynomialBoundaryConditions",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI64",
                    "scale": "PolynomialBoundaryConditions"
                },
                {
                    "name": "NI.Scratchpad.AsInt64.Bool",
                    "description-en": "registerSize=64, bitfieldSize=1, dataType=Int64",
                    "documentation-en": "Read write 64-bit scratchpad with 1 bit range as Int64",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchBool"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32",
                    "description-en": "use 64-bit Scratchpad as UInt32",
                    "documentation-en": "Read write 64-bit scratchpad with UInt32 value",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/Scratch32"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.U64",
                    "description-en": "registerSize=64, bitfieldSize=64, dataType=UInt32",
                    "documentation-en": "Read write 64-bit scratchpad with U64 range as UInt32",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/Scratch64"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.I64",
                    "description-en": "registerSize=64, bitfieldSize=64, dataType=UInt32",
                    "documentation-en": "Read write 64-bit scratchpad with I64 range as UInt32",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI64"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.U32",
                    "description-en": "registerSize=64, bitfieldSize=32, dataType=UInt32",
                    "documentation-en": "Read write 64-bit scratchpad with U32 range as UInt32",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/Scratch32"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.I32",
                    "description-en": "registerSize=64, bitfieldSize=32, dataType=UInt32",
                    "documentation-en": "Read write 64-bit scratchpad with I32 range as UInt32",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI32"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.U16",
                    "description-en": "registerSize=64, bitfieldSize=16, dataType=UInt32",
                    "documentation-en": "Read write 64-bit scratchpad with U16 range as UInt32",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/Scratch16"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.I16",
                    "description-en": "registerSize=64, bitfieldSize=16, dataType=UInt32",
                    "documentation-en": "Read write 64-bit scratchpad with I16 range as UInt32",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI16"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.U8",
                    "description-en": "registerSize=64, bitfieldSize=8, dataType=UInt32",
                    "documentation-en": "Read write 64-bit scratchpad with U8 range as UInt32",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/Scratch8"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.I8",
                    "description-en": "registerSize=64, bitfieldSize=8, dataType=UInt32",
                    "documentation-en": "Read write 64-bit scratchpad with I8 range as UInt32",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI8"
                },
        // Scale properties used by Skynet test
                {
                    "name": "NI.Scratchpad.AsUInt32.TableStrict12Elements",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/Scratch32",
                    "scale": "TableStrict12Elements"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.TableRound",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/Scratch32",
                    "scale": "TableRound"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.TableInterpolate",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/Scratch32",
                    "scale": "TableInterpolate"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.LinearDivideBy8",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/Scratch32",
                    "scale": "LinearDivideBy8"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.Times2Plus2",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/Scratch32",
                    "scale": "Times2Plus2"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.PolynomialThermocouple",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/Scratch32",
                    "scale": "PolynomialThermocouple",
                    "min": 0,
                    "max": 760
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.PolynomialBoundaryConditions",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/Scratch32",
                    "scale": "PolynomialBoundaryConditions"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.Bool",
                    "description-en": "registerSize=64, bitfieldSize=1, dataType=UInt32",
                    "documentation-en": "Read write 64-bit scratchpad with 1 bit range as UInt32",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchBool"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64",
                    "description-en": "use 64-bit Scratchpad as UInt64",
                    "documentation-en": "Read write 64-bit scratchpad with UInt64 value",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/Scratch64"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.U64",
                    "description-en": "registerSize=64, bitfieldSize=64, dataType=UInt64",
                    "documentation-en": "Read write 64-bit scratchpad with U64 range as UInt64",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/Scratch64"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.I64",
                    "description-en": "registerSize=64, bitfieldSize=64, dataType=UInt64",
                    "documentation-en": "Read write 64-bit scratchpad with I64 range as UInt64",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI64"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.U32",
                    "description-en": "registerSize=64, bitfieldSize=32, dataType=UInt64",
                    "documentation-en": "Read write 64-bit scratchpad with U32 range as UInt64",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/Scratch32"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.I32",
                    "description-en": "registerSize=64, bitfieldSize=32, dataType=UInt64",
                    "documentation-en": "Read write 64-bit scratchpad with I32 range as UInt64",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI32"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.U16",
                    "description-en": "registerSize=64, bitfieldSize=16, dataType=UInt64",
                    "documentation-en": "Read write 64-bit scratchpad with U16 range as UInt64",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/Scratch16"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.I16",
                    "description-en": "registerSize=64, bitfieldSize=16, dataType=UInt64",
                    "documentation-en": "Read write 64-bit scratchpad with I16 range as UInt64",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI16"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.U8",
                    "description-en": "registerSize=64, bitfieldSize=8, dataType=UInt64",
                    "documentation-en": "Read write 64-bit scratchpad with U8 range as UInt64",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/Scratch8"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.I8",
                    "description-en": "registerSize=64, bitfieldSize=8, dataType=UInt64",
                    "documentation-en": "Read write 64-bit scratchpad with I8 range as UInt64",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchI8"
                },
        // Scale properties used by Skynet test
                {
                    "name": "NI.Scratchpad.AsUInt64.TableStrict12Elements",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/Scratch64",
                    "scale": "TableStrict12Elements"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.TableRound",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/Scratch64",
                    "scale": "TableRound"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.TableInterpolate",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/Scratch64",
                    "scale": "TableInterpolate"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.LinearDivideBy8",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/Scratch64",
                    "scale": "LinearDivideBy8"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.Times2Plus2",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/Scratch64",
                    "scale": "Times2Plus2"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.PolynomialThermocouple",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/Scratch64",
                    "scale": "PolynomialThermocouple",
                    "min": 0,
                    "max": 760
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.PolynomialBoundaryConditions",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/Scratch64",
                    "scale": "PolynomialBoundaryConditions"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.Bool",
                    "description-en": "registerSize=64, bitfieldSize=1, dataType=UInt64",
                    "documentation-en": "Read write 64-bit scratchpad with 1 bit range as UInt64",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch64/ScratchBool"
                }
            ]
        },
        {
            "name": "Scratchpad32",
            "properties": [
                {
                   "name": "NI.ChannelName",
                   "dataType": "String",
                   "value": "Scratchpad32"
                },
                {
                    "name": "NI.Scratchpad.RegisterSize",
                    "description-en": "Indicates the width of the register backing this physical channel",
                    "dataType": "Int32",
                    "value": 32
                },
                {
                    "name": "NI.Scratchpad.AsBool",
                    "description-en": "use 32-bit Scratchpad as Bool",
                    "documentation-en": "Read write 32-bit scratchpad with Bool value",
                    "dataType": "Bool",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchBool"
                },
                {
                    "name": "NI.Scratchpad.AsBool.U32",
                    "description-en": "registerSize=32, bitfieldSize=32, dataType=Bool",
                    "documentation-en": "Read write 32-bit scratchpad with U32 range as Bool",
                    "dataType": "Bool",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/Scratch32"
                },
                {
                    "name": "NI.Scratchpad.AsBool.I32",
                    "description-en": "registerSize=32, bitfieldSize=32, dataType=Bool",
                    "documentation-en": "Read write 32-bit scratchpad with I32 range as Bool",
                    "dataType": "Bool",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI32"
                },
                {
                    "name": "NI.Scratchpad.AsBool.U16",
                    "description-en": "registerSize=32, bitfieldSize=16, dataType=Bool",
                    "documentation-en": "Read write 32-bit scratchpad with U16 range as Bool",
                    "dataType": "Bool",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/Scratch16"
                },
                {
                    "name": "NI.Scratchpad.AsBool.I16",
                    "description-en": "registerSize=32, bitfieldSize=16, dataType=Bool",
                    "documentation-en": "Read write 32-bit scratchpad with I16 range as Bool",
                    "dataType": "Bool",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI16"
                },
                {
                    "name": "NI.Scratchpad.AsBool.U8",
                    "description-en": "registerSize=32, bitfieldSize=8, dataType=Bool",
                    "documentation-en": "Read write 32-bit scratchpad with U8 range as Bool",
                    "dataType": "Bool",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/Scratch8"
                },
                {
                    "name": "NI.Scratchpad.AsBool.I8",
                    "description-en": "registerSize=32, bitfieldSize=8, dataType=Bool",
                    "documentation-en": "Read write 32-bit scratchpad with I8 range as Bool",
                    "dataType": "Bool",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI8"
                },
        // Scale properties used by Skynet test
                {
                    "name": "NI.Scratchpad.AsBool.InvertBoolean",
                    "dataType": "Bool",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchBool",
                    "scale": "InvertBoolean"
                },
                {
                    "name": "NI.Scratchpad.AsBool.TableStrictTrueFalse",
                    "dataType": "Bool",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI32",
                    "scale": "TableStrictTrueFalse"
                },
                {
                    "name": "NI.Scratchpad.AsBool.TableStrictFalse",
                    "dataType": "Bool",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI32",
                    "scale": "TableStrictFalse"
                },
                {
                    "name": "NI.Scratchpad.AsBool.TableStrictTrue",
                    "dataType": "Bool",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI32",
                    "scale": "TableStrictTrue"
                },
                {
                    "name": "NI.Scratchpad.AsBool.Bool",
                    "description-en": "registerSize=32, bitfieldSize=1, dataType=Bool",
                    "documentation-en": "Read write 32-bit scratchpad with 1 bit range as Bool",
                    "dataType": "Bool",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchBool"
                },
                {
                    "name": "NI.Scratchpad.AsDouble",
                    "description-en": "use 32-bit Scratchpad as Double",
                    "documentation-en": "Read write 32-bit scratchpad with Double value",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI32"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.U32",
                    "description-en": "registerSize=32, bitfieldSize=32, dataType=Double",
                    "documentation-en": "Read write 32-bit scratchpad with U32 range as Double",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/Scratch32"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.I32",
                    "description-en": "registerSize=32, bitfieldSize=32, dataType=Double",
                    "documentation-en": "Read write 32-bit scratchpad with I32 range as Double",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI32"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.U16",
                    "description-en": "registerSize=32, bitfieldSize=16, dataType=Double",
                    "documentation-en": "Read write 32-bit scratchpad with U16 range as Double",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/Scratch16"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.I16",
                    "description-en": "registerSize=32, bitfieldSize=16, dataType=Double",
                    "documentation-en": "Read write 32-bit scratchpad with I16 range as Double",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI16"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.U8",
                    "description-en": "registerSize=32, bitfieldSize=8, dataType=Double",
                    "documentation-en": "Read write 32-bit scratchpad with U8 range as Double",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/Scratch8"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.I8",
                    "description-en": "registerSize=32, bitfieldSize=8, dataType=Double",
                    "documentation-en": "Read write 32-bit scratchpad with I8 range as Double",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI8"
                },
        // Scale properties used by Skynet test
                {
                    "name": "NI.Scratchpad.AsDouble.TableStrict",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI32",
                    "scale": "TableStrict"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.TableStrict12Elements",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI32",
                    "scale": "TableStrict12Elements"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.TableRound",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI32",
                    "scale": "TableRound"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.TableInterpolate",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI32",
                    "scale": "TableInterpolate"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.LinearDivideBy8",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI32",
                    "scale": "LinearDivideBy8"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.Times2Plus2",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI32",
                    "scale": "Times2Plus2"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.PolynomialThermocouple",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI32",
                    "scale": "PolynomialThermocouple",
                    "min": 0,
                    "max": 760
                },
                {
                    "name": "NI.Scratchpad.AsDouble.PolynomialBoundaryConditions",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI32",
                    "scale": "PolynomialBoundaryConditions"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.Bool",
                    "description-en": "registerSize=32, bitfieldSize=1, dataType=Double",
                    "documentation-en": "Read write 32-bit scratchpad with 1 bit range as Double",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchBool"
                },
                {
                    "name": "NI.Scratchpad.AsInt32",
                    "description-en": "use 32-bit Scratchpad as Int32",
                    "documentation-en": "Read write 32-bit scratchpad with Int32 value",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI32"
                },
                {
                    "name": "NI.Scratchpad.AsInt32.U32",
                    "description-en": "registerSize=32, bitfieldSize=32, dataType=Int32",
                    "documentation-en": "Read write 32-bit scratchpad with U32 range as Int32",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/Scratch32"
                },
                {
                    "name": "NI.Scratchpad.AsInt32.I32",
                    "description-en": "registerSize=32, bitfieldSize=32, dataType=Int32",
                    "documentation-en": "Read write 32-bit scratchpad with I32 range as Int32",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI32"
                },
                {
                    "name": "NI.Scratchpad.AsInt32.U16",
                    "description-en": "registerSize=32, bitfieldSize=16, dataType=Int32",
                    "documentation-en": "Read write 32-bit scratchpad with U16 range as Int32",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/Scratch16"
                },
                {
                    "name": "NI.Scratchpad.AsInt32.I16",
                    "description-en": "registerSize=32, bitfieldSize=16, dataType=Int32",
                    "documentation-en": "Read write 32-bit scratchpad with I16 range as Int32",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI16"
                },
                {
                    "name": "NI.Scratchpad.AsInt32.U8",
                    "description-en": "registerSize=32, bitfieldSize=8, dataType=Int32",
                    "documentation-en": "Read write 32-bit scratchpad with U8 range as Int32",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/Scratch8"
                },
                {
                    "name": "NI.Scratchpad.AsInt32.I8",
                    "description-en": "registerSize=32, bitfieldSize=8, dataType=Int32",
                    "documentation-en": "Read write 32-bit scratchpad with I8 range as Int32",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI8"
                },
        // Scale properties used by Skynet test
                {
                    "name": "NI.Scratchpad.AsInt32.TableStrict12Elements",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI32",
                    "scale": "TableStrict12Elements"
                },
                {
                    "name": "NI.Scratchpad.AsInt32.TableRound",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI32",
                    "scale": "TableRound"
                },
                {
                    "name": "NI.Scratchpad.AsInt32.TableInterpolate",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI32",
                    "scale": "TableInterpolate"
                },
                {
                    "name": "NI.Scratchpad.AsInt32.LinearDivideBy8",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI32",
                    "scale": "LinearDivideBy8"
                },
                {
                    "name": "NI.Scratchpad.AsInt32.Times2Plus2",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI32",
                    "scale": "Times2Plus2"
                },
                {
                    "name": "NI.Scratchpad.AsInt32.PolynomialThermocouple",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI32",
                    "scale": "PolynomialThermocouple",
                    "min": 0,
                    "max": 760
                },
                {
                    "name": "NI.Scratchpad.AsInt32.PolynomialBoundaryConditions",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI32",
                    "scale": "PolynomialBoundaryConditions"
                },
                {
                    "name": "NI.Scratchpad.AsInt32.Bool",
                    "description-en": "registerSize=32, bitfieldSize=1, dataType=Int32",
                    "documentation-en": "Read write 32-bit scratchpad with 1 bit range as Int32",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchBool"
                },
                {
                    "name": "NI.Scratchpad.AsInt64",
                    "description-en": "use 32-bit Scratchpad as Int64",
                    "documentation-en": "Read write 32-bit scratchpad with Int64 value",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI32"
                },
                {
                    "name": "NI.Scratchpad.AsInt64.U32",
                    "description-en": "registerSize=32, bitfieldSize=32, dataType=Int64",
                    "documentation-en": "Read write 32-bit scratchpad with U32 range as Int64",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/Scratch32"
                },
                {
                    "name": "NI.Scratchpad.AsInt64.I32",
                    "description-en": "registerSize=32, bitfieldSize=32, dataType=Int64",
                    "documentation-en": "Read write 32-bit scratchpad with I32 range as Int64",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI32"
                },
                {
                    "name": "NI.Scratchpad.AsInt64.U16",
                    "description-en": "registerSize=32, bitfieldSize=16, dataType=Int64",
                    "documentation-en": "Read write 32-bit scratchpad with U16 range as Int64",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/Scratch16"
                },
                {
                    "name": "NI.Scratchpad.AsInt64.I16",
                    "description-en": "registerSize=32, bitfieldSize=16, dataType=Int64",
                    "documentation-en": "Read write 32-bit scratchpad with I16 range as Int64",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI16"
                },
                {
                    "name": "NI.Scratchpad.AsInt64.U8",
                    "description-en": "registerSize=32, bitfieldSize=8, dataType=Int64",
                    "documentation-en": "Read write 32-bit scratchpad with U8 range as Int64",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/Scratch8"
                },
                {
                    "name": "NI.Scratchpad.AsInt64.I8",
                    "description-en": "registerSize=32, bitfieldSize=8, dataType=Int64",
                    "documentation-en": "Read write 32-bit scratchpad with I8 range as Int64",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI8"
                },
        // Scale properties used by Skynet test
                {
                    "name": "NI.Scratchpad.AsInt64.TableStrict12Elements",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI32",
                    "scale": "TableStrict12Elements"
                },
                {
                    "name": "NI.Scratchpad.AsInt64.TableRound",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI32",
                    "scale": "TableRound"
                },
                {
                    "name": "NI.Scratchpad.AsInt64.TableInterpolate",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI32",
                    "scale": "TableInterpolate"
                },
                {
                    "name": "NI.Scratchpad.AsInt64.LinearDivideBy8",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI32",
                    "scale": "LinearDivideBy8"
                },
                {
                    "name": "NI.Scratchpad.AsInt64.Times2Plus2",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI32",
                    "scale": "Times2Plus2"
                },
                {
                    "name": "NI.Scratchpad.AsInt64.PolynomialThermocouple",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI32",
                    "scale": "PolynomialThermocouple",
                    "min": 0,
                    "max": 760
                },
                {
                    "name": "NI.Scratchpad.AsInt64.PolynomialBoundaryConditions",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI32",
                    "scale": "PolynomialBoundaryConditions"
                },
                {
                    "name": "NI.Scratchpad.AsInt64.Bool",
                    "description-en": "registerSize=32, bitfieldSize=1, dataType=Int64",
                    "documentation-en": "Read write 32-bit scratchpad with 1 bit range as Int64",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchBool"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32",
                    "description-en": "use 32-bit Scratchpad as UInt32",
                    "documentation-en": "Read write 32-bit scratchpad with UInt32 value",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/Scratch32"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.U32",
                    "description-en": "registerSize=32, bitfieldSize=32, dataType=UInt32",
                    "documentation-en": "Read write 32-bit scratchpad with U32 range as UInt32",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/Scratch32"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.I32",
                    "description-en": "registerSize=32, bitfieldSize=32, dataType=UInt32",
                    "documentation-en": "Read write 32-bit scratchpad with I32 range as UInt32",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI32"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.U16",
                    "description-en": "registerSize=32, bitfieldSize=16, dataType=UInt32",
                    "documentation-en": "Read write 32-bit scratchpad with U16 range as UInt32",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/Scratch16"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.I16",
                    "description-en": "registerSize=32, bitfieldSize=16, dataType=UInt32",
                    "documentation-en": "Read write 32-bit scratchpad with I16 range as UInt32",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI16"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.U8",
                    "description-en": "registerSize=32, bitfieldSize=8, dataType=UInt32",
                    "documentation-en": "Read write 32-bit scratchpad with U8 range as UInt32",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/Scratch8"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.I8",
                    "description-en": "registerSize=32, bitfieldSize=8, dataType=UInt32",
                    "documentation-en": "Read write 32-bit scratchpad with I8 range as UInt32",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI8"
                },
        // Scale properties used by Skynet test
                {
                    "name": "NI.Scratchpad.AsUInt32.TableStrict12Elements",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/Scratch32",
                    "scale": "TableStrict12Elements"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.TableRound",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/Scratch32",
                    "scale": "TableRound"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.TableInterpolate",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/Scratch32",
                    "scale": "TableInterpolate"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.LinearDivideBy8",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/Scratch32",
                    "scale": "LinearDivideBy8"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.Times2Plus2",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/Scratch32",
                    "scale": "Times2Plus2"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.PolynomialThermocouple",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/Scratch32",
                    "scale": "PolynomialThermocouple",
                    "min": 0,
                    "max": 760
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.PolynomialBoundaryConditions",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/Scratch32",
                    "scale": "PolynomialBoundaryConditions"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.Bool",
                    "description-en": "registerSize=32, bitfieldSize=1, dataType=UInt32",
                    "documentation-en": "Read write 32-bit scratchpad with 1 bit range as UInt32",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchBool"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64",
                    "description-en": "use 32-bit Scratchpad as UInt64",
                    "documentation-en": "Read write 32-bit scratchpad with UInt64 value",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/Scratch32"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.U32",
                    "description-en": "registerSize=32, bitfieldSize=32, dataType=UInt64",
                    "documentation-en": "Read write 32-bit scratchpad with U32 range as UInt64",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/Scratch32"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.I32",
                    "description-en": "registerSize=32, bitfieldSize=32, dataType=UInt64",
                    "documentation-en": "Read write 32-bit scratchpad with I32 range as UInt64",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI32"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.U16",
                    "description-en": "registerSize=32, bitfieldSize=16, dataType=UInt64",
                    "documentation-en": "Read write 32-bit scratchpad with U16 range as UInt64",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/Scratch16"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.I16",
                    "description-en": "registerSize=32, bitfieldSize=16, dataType=UInt64",
                    "documentation-en": "Read write 32-bit scratchpad with I16 range as UInt64",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI16"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.U8",
                    "description-en": "registerSize=32, bitfieldSize=8, dataType=UInt64",
                    "documentation-en": "Read write 32-bit scratchpad with U8 range as UInt64",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/Scratch8"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.I8",
                    "description-en": "registerSize=32, bitfieldSize=8, dataType=UInt64",
                    "documentation-en": "Read write 32-bit scratchpad with I8 range as UInt64",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchI8"
                },
        // Scale properties used by Skynet test
                {
                    "name": "NI.Scratchpad.AsUInt64.TableStrict12Elements",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/Scratch32",
                    "scale": "TableStrict12Elements"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.TableRound",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/Scratch32",
                    "scale": "TableRound"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.TableInterpolate",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/Scratch32",
                    "scale": "TableInterpolate"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.LinearDivideBy8",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/Scratch32",
                    "scale": "LinearDivideBy8"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.Times2Plus2",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/Scratch32",
                    "scale": "Times2Plus2"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.PolynomialThermocouple",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/Scratch32",
                    "scale": "PolynomialThermocouple",
                    "min": 0,
                    "max": 760
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.PolynomialBoundaryConditions",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/Scratch32",
                    "scale": "PolynomialBoundaryConditions"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.Bool",
                    "description-en": "registerSize=32, bitfieldSize=1, dataType=UInt64",
                    "documentation-en": "Read write 32-bit scratchpad with 1 bit range as UInt64",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch32/ScratchBool"
                }
            ]
        },
        {
            "name": "Scratchpad16",
            "properties": [
                {
                   "name": "NI.ChannelName",
                   "dataType": "String",
                   "value": "Scratchpad16"
                },
                {
                    "name": "NI.Scratchpad.RegisterSize",
                    "description-en": "Indicates the width of the register backing this physical channel",
                    "dataType": "Int32",
                    "value": 16
                },
                {
                    "name": "NI.Scratchpad.AsBool",
                    "description-en": "use 16-bit Scratchpad as Bool",
                    "documentation-en": "Read write 16-bit scratchpad with Bool value",
                    "dataType": "Bool",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchBool"
                },
                {
                    "name": "NI.Scratchpad.AsBool.U16",
                    "description-en": "registerSize=16, bitfieldSize=16, dataType=Bool",
                    "documentation-en": "Read write 16-bit scratchpad with U16 range as Bool",
                    "dataType": "Bool",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/Scratch16"
                },
                {
                    "name": "NI.Scratchpad.AsBool.I16",
                    "description-en": "registerSize=16, bitfieldSize=16, dataType=Bool",
                    "documentation-en": "Read write 16-bit scratchpad with I16 range as Bool",
                    "dataType": "Bool",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchI16"
                },
                {
                    "name": "NI.Scratchpad.AsBool.U8",
                    "description-en": "registerSize=16, bitfieldSize=8, dataType=Bool",
                    "documentation-en": "Read write 16-bit scratchpad with U8 range as Bool",
                    "dataType": "Bool",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/Scratch8"
                },
                {
                    "name": "NI.Scratchpad.AsBool.I8",
                    "description-en": "registerSize=16, bitfieldSize=8, dataType=Bool",
                    "documentation-en": "Read write 16-bit scratchpad with I8 range as Bool",
                    "dataType": "Bool",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchI8"
                },
        // Scale properties used by Skynet test
                {
                    "name": "NI.Scratchpad.AsBool.InvertBoolean",
                    "dataType": "Bool",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchBool",
                    "scale": "InvertBoolean"
                },
                {
                    "name": "NI.Scratchpad.AsBool.TableStrictTrueFalse",
                    "dataType": "Bool",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchI16",
                    "scale": "TableStrictTrueFalse"
                },
                {
                    "name": "NI.Scratchpad.AsBool.TableStrictFalse",
                    "dataType": "Bool",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchI16",
                    "scale": "TableStrictFalse"
                },
                {
                    "name": "NI.Scratchpad.AsBool.TableStrictTrue",
                    "dataType": "Bool",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchI16",
                    "scale": "TableStrictTrue"
                },
                {
                    "name": "NI.Scratchpad.AsBool.Bool",
                    "description-en": "registerSize=16, bitfieldSize=1, dataType=Bool",
                    "documentation-en": "Read write 16-bit scratchpad with 1 bit range as Bool",
                    "dataType": "Bool",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchBool"
                },
                {
                    "name": "NI.Scratchpad.AsDouble",
                    "description-en": "use 16-bit Scratchpad as Double",
                    "documentation-en": "Read write 16-bit scratchpad with Double value",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchI16"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.U16",
                    "description-en": "registerSize=16, bitfieldSize=16, dataType=Double",
                    "documentation-en": "Read write 16-bit scratchpad with U16 range as Double",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/Scratch16"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.I16",
                    "description-en": "registerSize=16, bitfieldSize=16, dataType=Double",
                    "documentation-en": "Read write 16-bit scratchpad with I16 range as Double",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchI16"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.U8",
                    "description-en": "registerSize=16, bitfieldSize=8, dataType=Double",
                    "documentation-en": "Read write 16-bit scratchpad with U8 range as Double",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/Scratch8"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.I8",
                    "description-en": "registerSize=16, bitfieldSize=8, dataType=Double",
                    "documentation-en": "Read write 16-bit scratchpad with I8 range as Double",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchI8"
                },
        // Scale properties used by Skynet test
                {
                    "name": "NI.Scratchpad.AsDouble.TableStrict",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchI16",
                    "scale": "TableStrict"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.TableStrict12Elements",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchI16",
                    "scale": "TableStrict12Elements"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.TableRound",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchI16",
                    "scale": "TableRound"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.TableInterpolate",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchI16",
                    "scale": "TableInterpolate"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.LinearDivideBy8",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchI16",
                    "scale": "LinearDivideBy8"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.Times2Plus2",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchI16",
                    "scale": "Times2Plus2"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.PolynomialThermocouple",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchI16",
                    "scale": "PolynomialThermocouple",
                    "min": 0,
                    "max": 760
                },
                {
                    "name": "NI.Scratchpad.AsDouble.PolynomialBoundaryConditions",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchI16",
                    "scale": "PolynomialBoundaryConditions"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.Bool",
                    "description-en": "registerSize=16, bitfieldSize=1, dataType=Double",
                    "documentation-en": "Read write 16-bit scratchpad with 1 bit range as Double",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchBool"
                },
                {
                    "name": "NI.Scratchpad.AsInt32",
                    "description-en": "use 16-bit Scratchpad as Int32",
                    "documentation-en": "Read write 16-bit scratchpad with Int32 value",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchI16"
                },
                {
                    "name": "NI.Scratchpad.AsInt32.U16",
                    "description-en": "registerSize=16, bitfieldSize=16, dataType=Int32",
                    "documentation-en": "Read write 16-bit scratchpad with U16 range as Int32",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/Scratch16"
                },
                {
                    "name": "NI.Scratchpad.AsInt32.I16",
                    "description-en": "registerSize=16, bitfieldSize=16, dataType=Int32",
                    "documentation-en": "Read write 16-bit scratchpad with I16 range as Int32",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchI16"
                },
                {
                    "name": "NI.Scratchpad.AsInt32.U8",
                    "description-en": "registerSize=16, bitfieldSize=8, dataType=Int32",
                    "documentation-en": "Read write 16-bit scratchpad with U8 range as Int32",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/Scratch8"
                },
                {
                    "name": "NI.Scratchpad.AsInt32.I8",
                    "description-en": "registerSize=16, bitfieldSize=8, dataType=Int32",
                    "documentation-en": "Read write 16-bit scratchpad with I8 range as Int32",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchI8"
                },
        // Scale properties used by Skynet test
                {
                    "name": "NI.Scratchpad.AsInt32.TableStrict12Elements",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchI16",
                    "scale": "TableStrict12Elements"
                },
                {
                    "name": "NI.Scratchpad.AsInt32.TableRound",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchI16",
                    "scale": "TableRound"
                },
                {
                    "name": "NI.Scratchpad.AsInt32.TableInterpolate",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchI16",
                    "scale": "TableInterpolate"
                },
                {
                    "name": "NI.Scratchpad.AsInt32.LinearDivideBy8",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchI16",
                    "scale": "LinearDivideBy8"
                },
                {
                    "name": "NI.Scratchpad.AsInt32.Times2Plus2",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchI16",
                    "scale": "Times2Plus2"
                },
                {
                    "name": "NI.Scratchpad.AsInt32.PolynomialThermocouple",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchI16",
                    "scale": "PolynomialThermocouple",
                    "min": 0,
                    "max": 760
                },
                {
                    "name": "NI.Scratchpad.AsInt32.PolynomialBoundaryConditions",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchI16",
                    "scale": "PolynomialBoundaryConditions"
                },
                {
                    "name": "NI.Scratchpad.AsInt32.Bool",
                    "description-en": "registerSize=16, bitfieldSize=1, dataType=Int32",
                    "documentation-en": "Read write 16-bit scratchpad with 1 bit range as Int32",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchBool"
                },
                {
                    "name": "NI.Scratchpad.AsInt64",
                    "description-en": "use 16-bit Scratchpad as Int64",
                    "documentation-en": "Read write 16-bit scratchpad with Int64 value",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchI16"
                },
                {
                    "name": "NI.Scratchpad.AsInt64.U16",
                    "description-en": "registerSize=16, bitfieldSize=16, dataType=Int64",
                    "documentation-en": "Read write 16-bit scratchpad with U16 range as Int64",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/Scratch16"
                },
                {
                    "name": "NI.Scratchpad.AsInt64.I16",
                    "description-en": "registerSize=16, bitfieldSize=16, dataType=Int64",
                    "documentation-en": "Read write 16-bit scratchpad with I16 range as Int64",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchI16"
                },
                {
                    "name": "NI.Scratchpad.AsInt64.U8",
                    "description-en": "registerSize=16, bitfieldSize=8, dataType=Int64",
                    "documentation-en": "Read write 16-bit scratchpad with U8 range as Int64",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/Scratch8"
                },
                {
                    "name": "NI.Scratchpad.AsInt64.I8",
                    "description-en": "registerSize=16, bitfieldSize=8, dataType=Int64",
                    "documentation-en": "Read write 16-bit scratchpad with I8 range as Int64",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchI8"
                },
        // Scale properties used by Skynet test
                {
                    "name": "NI.Scratchpad.AsInt64.TableStrict12Elements",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchI16",
                    "scale": "TableStrict12Elements"
                },
                {
                    "name": "NI.Scratchpad.AsInt64.TableRound",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchI16",
                    "scale": "TableRound"
                },
                {
                    "name": "NI.Scratchpad.AsInt64.TableInterpolate",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchI16",
                    "scale": "TableInterpolate"
                },
                {
                    "name": "NI.Scratchpad.AsInt64.LinearDivideBy8",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchI16",
                    "scale": "LinearDivideBy8"
                },
                {
                    "name": "NI.Scratchpad.AsInt64.Times2Plus2",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchI16",
                    "scale": "Times2Plus2"
                },
                {
                    "name": "NI.Scratchpad.AsInt64.PolynomialThermocouple",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchI16",
                    "scale": "PolynomialThermocouple",
                    "min": 0,
                    "max": 760
                },
                {
                    "name": "NI.Scratchpad.AsInt64.PolynomialBoundaryConditions",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchI16",
                    "scale": "PolynomialBoundaryConditions"
                },
                {
                    "name": "NI.Scratchpad.AsInt64.Bool",
                    "description-en": "registerSize=16, bitfieldSize=1, dataType=Int64",
                    "documentation-en": "Read write 16-bit scratchpad with 1 bit range as Int64",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchBool"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32",
                    "description-en": "use 16-bit Scratchpad as UInt32",
                    "documentation-en": "Read write 16-bit scratchpad with UInt32 value",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/Scratch16"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.U16",
                    "description-en": "registerSize=16, bitfieldSize=16, dataType=UInt32",
                    "documentation-en": "Read write 16-bit scratchpad with U16 range as UInt32",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/Scratch16"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.I16",
                    "description-en": "registerSize=16, bitfieldSize=16, dataType=UInt32",
                    "documentation-en": "Read write 16-bit scratchpad with I16 range as UInt32",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchI16"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.U8",
                    "description-en": "registerSize=16, bitfieldSize=8, dataType=UInt32",
                    "documentation-en": "Read write 16-bit scratchpad with U8 range as UInt32",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/Scratch8"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.I8",
                    "description-en": "registerSize=16, bitfieldSize=8, dataType=UInt32",
                    "documentation-en": "Read write 16-bit scratchpad with I8 range as UInt32",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchI8"
                },
        // Scale properties used by Skynet test
                {
                    "name": "NI.Scratchpad.AsUInt32.TableStrict12Elements",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/Scratch16",
                    "scale": "TableStrict12Elements"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.TableRound",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/Scratch16",
                    "scale": "TableRound"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.TableInterpolate",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/Scratch16",
                    "scale": "TableInterpolate"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.LinearDivideBy8",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/Scratch16",
                    "scale": "LinearDivideBy8"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.Times2Plus2",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/Scratch16",
                    "scale": "Times2Plus2"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.PolynomialThermocouple",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/Scratch16",
                    "scale": "PolynomialThermocouple",
                    "min": 0,
                    "max": 760
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.PolynomialBoundaryConditions",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/Scratch16",
                    "scale": "PolynomialBoundaryConditions"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.Bool",
                    "description-en": "registerSize=16, bitfieldSize=1, dataType=UInt32",
                    "documentation-en": "Read write 16-bit scratchpad with 1 bit range as UInt32",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchBool"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64",
                    "description-en": "use 16-bit Scratchpad as UInt64",
                    "documentation-en": "Read write 16-bit scratchpad with UInt64 value",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/Scratch16"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.U16",
                    "description-en": "registerSize=16, bitfieldSize=16, dataType=UInt64",
                    "documentation-en": "Read write 16-bit scratchpad with U16 range as UInt64",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/Scratch16"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.I16",
                    "description-en": "registerSize=16, bitfieldSize=16, dataType=UInt64",
                    "documentation-en": "Read write 16-bit scratchpad with I16 range as UInt64",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchI16"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.U8",
                    "description-en": "registerSize=16, bitfieldSize=8, dataType=UInt64",
                    "documentation-en": "Read write 16-bit scratchpad with U8 range as UInt64",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/Scratch8"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.I8",
                    "description-en": "registerSize=16, bitfieldSize=8, dataType=UInt64",
                    "documentation-en": "Read write 16-bit scratchpad with I8 range as UInt64",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchI8"
                },
        // Scale properties used by Skynet test
                {
                    "name": "NI.Scratchpad.AsUInt64.TableStrict12Elements",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/Scratch16",
                    "scale": "TableStrict12Elements"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.TableRound",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/Scratch16",
                    "scale": "TableRound"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.TableInterpolate",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/Scratch16",
                    "scale": "TableInterpolate"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.LinearDivideBy8",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/Scratch16",
                    "scale": "LinearDivideBy8"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.Times2Plus2",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/Scratch16",
                    "scale": "Times2Plus2"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.PolynomialThermocouple",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/Scratch16",
                    "scale": "PolynomialThermocouple",
                    "min": 0,
                    "max": 760
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.PolynomialBoundaryConditions",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/Scratch16",
                    "scale": "PolynomialBoundaryConditions"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.Bool",
                    "description-en": "registerSize=16, bitfieldSize=1, dataType=UInt64",
                    "documentation-en": "Read write 16-bit scratchpad with 1 bit range as UInt64",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch16/ScratchBool"
                }
            ]
        },
        {
            "name": "Scratchpad8",
            "properties": [
                {
                   "name": "NI.ChannelName",
                   "dataType": "String",
                   "value": "Scratchpad8"
                },
                {
                    "name": "NI.Scratchpad.RegisterSize",
                    "description-en": "Indicates the width of the register backing this physical channel",
                    "dataType": "Int32",
                    "value": 8
                },
                {
                    "name": "NI.Scratchpad.AsBool",
                    "description-en": "use 8-bit Scratchpad as Bool",
                    "documentation-en": "Read write 8-bit scratchpad with Bool value",
                    "dataType": "Bool",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/ScratchBool"
                },
                {
                    "name": "NI.Scratchpad.AsBool.U8",
                    "description-en": "registerSize=8, bitfieldSize=8, dataType=Bool",
                    "documentation-en": "Read write 8-bit scratchpad with U8 range as Bool",
                    "dataType": "Bool",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/Scratch8"
                },
                {
                    "name": "NI.Scratchpad.AsBool.I8",
                    "description-en": "registerSize=8, bitfieldSize=8, dataType=Bool",
                    "documentation-en": "Read write 8-bit scratchpad with I8 range as Bool",
                    "dataType": "Bool",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/ScratchI8"
                },
        // Scale properties used by Skynet test
                {
                    "name": "NI.Scratchpad.AsBool.InvertBoolean",
                    "dataType": "Bool",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/ScratchBool",
                    "scale": "InvertBoolean"
                },
                {
                    "name": "NI.Scratchpad.AsBool.TableStrictTrueFalse",
                    "dataType": "Bool",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/ScratchI8",
                    "scale": "TableStrictTrueFalse"
                },
                {
                    "name": "NI.Scratchpad.AsBool.TableStrictFalse",
                    "dataType": "Bool",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/ScratchI8",
                    "scale": "TableStrictFalse"
                },
                {
                    "name": "NI.Scratchpad.AsBool.TableStrictTrue",
                    "dataType": "Bool",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/ScratchI8",
                    "scale": "TableStrictTrue"
                },
                {
                    "name": "NI.Scratchpad.AsBool.Bool",
                    "description-en": "registerSize=8, bitfieldSize=1, dataType=Bool",
                    "documentation-en": "Read write 8-bit scratchpad with 1 bit range as Bool",
                    "dataType": "Bool",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/ScratchBool"
                },
                {
                    "name": "NI.Scratchpad.AsDouble",
                    "description-en": "use 8-bit Scratchpad as Double",
                    "documentation-en": "Read write 8-bit scratchpad with Double value",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/ScratchI8"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.U8",
                    "description-en": "registerSize=8, bitfieldSize=8, dataType=Double",
                    "documentation-en": "Read write 8-bit scratchpad with U8 range as Double",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/Scratch8"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.I8",
                    "description-en": "registerSize=8, bitfieldSize=8, dataType=Double",
                    "documentation-en": "Read write 8-bit scratchpad with I8 range as Double",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/ScratchI8"
                },
        // Scale properties used by Skynet test
                {
                    "name": "NI.Scratchpad.AsDouble.TableStrict",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/ScratchI8",
                    "scale": "TableStrict"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.TableStrict12Elements",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/ScratchI8",
                    "scale": "TableStrict12Elements"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.TableRound",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/ScratchI8",
                    "scale": "TableRound"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.TableInterpolate",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/ScratchI8",
                    "scale": "TableInterpolate"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.LinearDivideBy8",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/ScratchI8",
                    "scale": "LinearDivideBy8"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.Times2Plus2",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/ScratchI8",
                    "scale": "Times2Plus2"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.PolynomialThermocouple",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/ScratchI8",
                    "scale": "PolynomialThermocouple",
                    "min": 0,
                    "max": 760
                },
                {
                    "name": "NI.Scratchpad.AsDouble.PolynomialBoundaryConditions",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/ScratchI8",
                    "scale": "PolynomialBoundaryConditions"
                },
                {
                    "name": "NI.Scratchpad.AsDouble.Bool",
                    "description-en": "registerSize=8, bitfieldSize=1, dataType=Double",
                    "documentation-en": "Read write 8-bit scratchpad with 1 bit range as Double",
                    "dataType": "Double",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/ScratchBool"
                },
                {
                    "name": "NI.Scratchpad.AsInt32",
                    "description-en": "use 8-bit Scratchpad as Int32",
                    "documentation-en": "Read write 8-bit scratchpad with Int32 value",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/ScratchI8"
                },
                {
                    "name": "NI.Scratchpad.AsInt32.U8",
                    "description-en": "registerSize=8, bitfieldSize=8, dataType=Int32",
                    "documentation-en": "Read write 8-bit scratchpad with U8 range as Int32",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/Scratch8"
                },
                {
                    "name": "NI.Scratchpad.AsInt32.I8",
                    "description-en": "registerSize=8, bitfieldSize=8, dataType=Int32",
                    "documentation-en": "Read write 8-bit scratchpad with I8 range as Int32",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/ScratchI8"
                },
        // Scale properties used by Skynet test
                {
                    "name": "NI.Scratchpad.AsInt32.TableStrict12Elements",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/ScratchI8",
                    "scale": "TableStrict12Elements"
                },
                {
                    "name": "NI.Scratchpad.AsInt32.TableRound",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/ScratchI8",
                    "scale": "TableRound"
                },
                {
                    "name": "NI.Scratchpad.AsInt32.TableInterpolate",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/ScratchI8",
                    "scale": "TableInterpolate"
                },
                {
                    "name": "NI.Scratchpad.AsInt32.LinearDivideBy8",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/ScratchI8",
                    "scale": "LinearDivideBy8"
                },
                {
                    "name": "NI.Scratchpad.AsInt32.Times2Plus2",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/ScratchI8",
                    "scale": "Times2Plus2"
                },
                {
                    "name": "NI.Scratchpad.AsInt32.PolynomialThermocouple",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/ScratchI8",
                    "scale": "PolynomialThermocouple",
                    "min": 0,
                    "max": 760
                },
                {
                    "name": "NI.Scratchpad.AsInt32.PolynomialBoundaryConditions",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/ScratchI8",
                    "scale": "PolynomialBoundaryConditions"
                },
                {
                    "name": "NI.Scratchpad.AsInt32.Bool",
                    "description-en": "registerSize=8, bitfieldSize=1, dataType=Int32",
                    "documentation-en": "Read write 8-bit scratchpad with 1 bit range as Int32",
                    "dataType": "Int32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/ScratchBool"
                },
                {
                    "name": "NI.Scratchpad.AsInt64",
                    "description-en": "use 8-bit Scratchpad as Int64",
                    "documentation-en": "Read write 8-bit scratchpad with Int64 value",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/ScratchI8"
                },
                {
                    "name": "NI.Scratchpad.AsInt64.U8",
                    "description-en": "registerSize=8, bitfieldSize=8, dataType=Int64",
                    "documentation-en": "Read write 8-bit scratchpad with U8 range as Int64",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/Scratch8"
                },
                {
                    "name": "NI.Scratchpad.AsInt64.I8",
                    "description-en": "registerSize=8, bitfieldSize=8, dataType=Int64",
                    "documentation-en": "Read write 8-bit scratchpad with I8 range as Int64",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/ScratchI8"
                },
        // Scale properties used by Skynet test
                {
                    "name": "NI.Scratchpad.AsInt64.TableStrict12Elements",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/ScratchI8",
                    "scale": "TableStrict12Elements"
                },
                {
                    "name": "NI.Scratchpad.AsInt64.TableRound",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/ScratchI8",
                    "scale": "TableRound"
                },
                {
                    "name": "NI.Scratchpad.AsInt64.TableInterpolate",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/ScratchI8",
                    "scale": "TableInterpolate"
                },
                {
                    "name": "NI.Scratchpad.AsInt64.LinearDivideBy8",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/ScratchI8",
                    "scale": "LinearDivideBy8"
                },
                {
                    "name": "NI.Scratchpad.AsInt64.Times2Plus2",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/ScratchI8",
                    "scale": "Times2Plus2"
                },
                {
                    "name": "NI.Scratchpad.AsInt64.PolynomialThermocouple",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/ScratchI8",
                    "scale": "PolynomialThermocouple",
                    "min": 0,
                    "max": 760
                },
                {
                    "name": "NI.Scratchpad.AsInt64.PolynomialBoundaryConditions",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/ScratchI8",
                    "scale": "PolynomialBoundaryConditions"
                },
                {
                    "name": "NI.Scratchpad.AsInt64.Bool",
                    "description-en": "registerSize=8, bitfieldSize=1, dataType=Int64",
                    "documentation-en": "Read write 8-bit scratchpad with 1 bit range as Int64",
                    "dataType": "Int64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/ScratchBool"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32",
                    "description-en": "use 8-bit Scratchpad as UInt32",
                    "documentation-en": "Read write 8-bit scratchpad with UInt32 value",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/Scratch8"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.U8",
                    "description-en": "registerSize=8, bitfieldSize=8, dataType=UInt32",
                    "documentation-en": "Read write 8-bit scratchpad with U8 range as UInt32",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/Scratch8"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.I8",
                    "description-en": "registerSize=8, bitfieldSize=8, dataType=UInt32",
                    "documentation-en": "Read write 8-bit scratchpad with I8 range as UInt32",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/ScratchI8"
                },
        // Scale properties used by Skynet test
                {
                    "name": "NI.Scratchpad.AsUInt32.TableStrict12Elements",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/Scratch8",
                    "scale": "TableStrict12Elements"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.TableRound",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/Scratch8",
                    "scale": "TableRound"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.TableInterpolate",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/Scratch8",
                    "scale": "TableInterpolate"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.LinearDivideBy8",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/Scratch8",
                    "scale": "LinearDivideBy8"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.Times2Plus2",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/Scratch8",
                    "scale": "Times2Plus2"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.PolynomialThermocouple",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/Scratch8",
                    "scale": "PolynomialThermocouple",
                    "min": 0,
                    "max": 760
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.PolynomialBoundaryConditions",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/Scratch8",
                    "scale": "PolynomialBoundaryConditions"
                },
                {
                    "name": "NI.Scratchpad.AsUInt32.Bool",
                    "description-en": "registerSize=8, bitfieldSize=1, dataType=UInt32",
                    "documentation-en": "Read write 8-bit scratchpad with 1 bit range as UInt32",
                    "dataType": "UInt32",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/ScratchBool"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64",
                    "description-en": "use 8-bit Scratchpad as UInt64",
                    "documentation-en": "Read write 8-bit scratchpad with UInt64 value",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/Scratch8"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.U8",
                    "description-en": "registerSize=8, bitfieldSize=8, dataType=UInt64",
                    "documentation-en": "Read write 8-bit scratchpad with U8 range as UInt64",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/Scratch8"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.I8",
                    "description-en": "registerSize=8, bitfieldSize=8, dataType=UInt64",
                    "documentation-en": "Read write 8-bit scratchpad with I8 range as UInt64",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/ScratchI8"
                },
        // Scale properties used by Skynet test
                {
                    "name": "NI.Scratchpad.AsUInt64.TableStrict12Elements",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/Scratch8",
                    "scale": "TableStrict12Elements"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.TableRound",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/Scratch8",
                    "scale": "TableRound"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.TableInterpolate",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/Scratch8",
                    "scale": "TableInterpolate"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.LinearDivideBy8",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/Scratch8",
                    "scale": "LinearDivideBy8"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.Times2Plus2",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/Scratch8",
                    "scale": "Times2Plus2"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.PolynomialThermocouple",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/Scratch8",
                    "scale": "PolynomialThermocouple",
                    "min": 0,
                    "max": 760
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.PolynomialBoundaryConditions",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/Scratch8",
                    "scale": "PolynomialBoundaryConditions"
                },
                {
                    "name": "NI.Scratchpad.AsUInt64.Bool",
                    "description-en": "registerSize=8, bitfieldSize=1, dataType=UInt64",
                    "documentation-en": "Read write 8-bit scratchpad with 1 bit range as UInt64",
                    "dataType": "UInt64",
                    "access": "ReadWrite",
                    "bitfield": "DebugScratch8/ScratchBool"
                }
            ]
        }
    ],

    "properties": [
        {
            "name": "NI.DateCode",
            "description-en": "Module CPLD Date Code",
            "documentationen": "Date code of the image on the module CPLD",
            "dataType": "UInt32",
            "bitfield": "Revision/DateCode",
            "access": "ReadOnly"
        },
        {
            "name": "NI.Debug.Alphabet",
            "description-en": "Constant string property",
            "documentation-en": "Constant string that returns the english alphabet",
            "dataType": "String",
            "value": "abcdefghijklmnopqrstuvwxyz"
        },
        {
            "name": "NI.Debug.LED0Bool",
            "description-en": "one of 4 blue LEDs with Bool data type",
            "documentation-en": "towards back of module, under 2 caps, LED on far right",
            "dataType": "Bool",
            "bitfield": "DebugLeds/DebugLed0",
            "access": "WriteOnly" // WriteOnly because this is defined as a strobe bitfield
        },
        {
            "name": "NI.Debug.LED1Bool",
            "description-en": "one of 4 blue LEDs with Bool data type",
            "documentation-en": "towards back of module, under 2 caps, 2nd LED from the right",
            "dataType": "Bool",
            "bitfield": "DebugLeds/DebugLed1",
            "access": "ReadWrite"
        },
        {
            "name": "NI.Debug.LED2Bool",
            "description-en": "one of 4 blue LEDs with Bool data type",
            "documentation-en": "towards back of module, under 2 caps, 2nd LED from the left",
            "dataType": "Bool",
            "bitfield": "DebugLeds/DebugLed2",
            "access": "ReadWrite"
        },
        {
            "name": "NI.Debug.LED3Bool",
            "description-en": "one of 4 blue LEDs with Bool data type",
            "documentation-en": "towards back of module, under 2 caps, LED on far left",
            "dataType": "Bool",
            "bitfield": "DebugLeds/DebugLed3",
            "access": "ReadWrite"
        },
        {
            "name": "NI.Debug.LED0Enum",
            "description-en": "one of 4 blue LEDs with Enum data type",
            "documentation-en": "towards back of module, under 2 caps, LED on far right",
            "dataType": "NI.LEDState",
            "bitfield": "DebugLeds/DebugLed0",
            "access": "WriteOnly"  // WriteOnly because this is defined as a strobe bitfield
        },
        {
            "name": "NI.Debug.LED1Enum",
            "description-en": "one of 4 blue LEDs with Enum data type",
            "documentation-en": "towards back of module, under 2 caps, 2nd LED from the right",
            "dataType": "NI.LEDState",
            "bitfield": "DebugLeds/DebugLed1",
            "access": "ReadWrite"
        },
        {
            "name": "NI.Debug.LED2Enum",
            "description-en": "one of 4 blue LEDs with Enum data type",
            "documentation-en": "towards back of module, under 2 caps, 2nd LED from the left",
            "dataType": "NI.LEDState",
            "bitfield": "DebugLeds/DebugLed2",
            "access": "ReadWrite"
        },
        {
            "name": "NI.Debug.LED3Enum",
            "description-en": "one of 4 blue LEDs with Enum data type",
            "documentation-en": "towards back of module, under 2 caps, LED on far left",
            "dataType": "NI.LEDState",
            "bitfield": "DebugLeds/DebugLed3",
            "access": "ReadWrite"
        },
        {
            "name": "NI.Scratchpad64.U64",
            "description-en": "use 64-bit Scratchpad as U64",
            "documentation-en": "Read write 64-bit scratchpad with U64 value",
            "dataType": "UInt64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/Scratch64"
        },
        {
            "name": "NI.Scratchpad64.I64",
            "description-en": "use 64-bit Scratchpad as I64",
            "documentation-en": "Read write 64-bit scratchpad with I64 value",
            "dataType": "Int64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/ScratchI64"
        },
        {
            "name": "NI.Scratchpad64.U32",
            "description-en": "use 64-bit Scratchpad as U32",
            "documentation-en": "Read write 64-bit scratchpad with U32 value",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/Scratch32"
        },
        {
            "name": "NI.Scratchpad64.I32",
            "description-en": "use 64-bit Scratchpad as I32",
            "documentation-en": "Read write 64-bit scratchpad with I32 value",
            "dataType": "Int32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/ScratchI32"
        },
        {
            "name": "NI.Scratchpad64.U16",
            "description-en": "use 64-bit Scratchpad as U16",
            "documentation-en": "Read write 64-bit scratchpad with U16 value",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/Scratch16"
        },
        {
            "name": "NI.Scratchpad64.I16",
            "description-en": "use 64-bit Scratchpad as I16",
            "documentation-en": "Read write 64-bit scratchpad with I16 value",
            "dataType": "Int32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/ScratchI16"
        },
        {
            "name": "NI.Scratchpad64.U8",
            "description-en": "use 64-bit Scratchpad as U8",
            "documentation-en": "Read write 64-bit scratchpad with U8 value",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/Scratch8"
        },
        {
            "name": "NI.Scratchpad64.I8",
            "description-en": "use 64-bit Scratchpad as I8",
            "documentation-en": "Read write 64-bit scratchpad with I8 value",
            "dataType": "Int32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/ScratchI8"
        },
        {
            "name": "NI.Scratchpad64.Bool",
            "description-en": "use 64-bit Scratchpad as Bool",
            "documentation-en": "Read write 64-bit scratchpad with Bool value",
            "dataType": "Bool",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/ScratchBool"
        },
        {
            "name": "NI.Scratchpad64.Double",
            "description-en": "use 64-bit Scratchpad as Double",
            "documentation-en": "Read write 64-bit scratchpad with Double value",
            "dataType": "Double",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/ScratchI64"
        },
        {
            "name": "NI.Scratchpad32.U32",
            "description-en": "use 32-bit Scratchpad as U32",
            "documentation-en": "Read write 32-bit scratchpad with U32 value",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/Scratch32"
        },
        {
            "name": "NI.Scratchpad32.I32",
            "description-en": "use 32-bit Scratchpad as I32",
            "documentation-en": "Read write 32-bit scratchpad with I32 value",
            "dataType": "Int32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/ScratchI32"
        },
        {
            "name": "NI.Scratchpad32.U16",
            "description-en": "use 32-bit Scratchpad as U16",
            "documentation-en": "Read write 32-bit scratchpad with U16 value",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/Scratch16"
        },
        {
            "name": "NI.Scratchpad32.I16",
            "description-en": "use 32-bit Scratchpad as I16",
            "documentation-en": "Read write 32-bit scratchpad with I16 value",
            "dataType": "Int32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/ScratchI16"
        },
        {
            "name": "NI.Scratchpad32.U8",
            "description-en": "use 32-bit Scratchpad as U8",
            "documentation-en": "Read write 32-bit scratchpad with U8 value",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/Scratch8"
        },
        {
            "name": "NI.Scratchpad32.I8",
            "description-en": "use 32-bit Scratchpad as I8",
            "documentation-en": "Read write 32-bit scratchpad with I8 value",
            "dataType": "Int32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/ScratchI8"
        },
        {
            "name": "NI.Scratchpad32.Bool",
            "description-en": "use 32-bit Scratchpad as Bool",
            "documentation-en": "Read write 32-bit scratchpad with Bool value",
            "dataType": "Bool",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/ScratchBool"
        },
        {
            "name": "NI.Scratchpad32.Double",
            "description-en": "use 32-bit Scratchpad as Double",
            "documentation-en": "Read write 32-bit scratchpad with Double value",
            "dataType": "Double",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/ScratchI32"
        },
        {
            "name": "NI.Scratchpad16.U16",
            "description-en": "use 16-bit Scratchpad as U16",
            "documentation-en": "Read write 16-bit scratchpad with U16 value",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch16/Scratch16"
        },
        {
            "name": "NI.Scratchpad16.I16",
            "description-en": "use 16-bit Scratchpad as I16",
            "documentation-en": "Read write 16-bit scratchpad with I16 value",
            "dataType": "Int32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch16/ScratchI16"
        },
        {
            "name": "NI.Scratchpad16.U8",
            "description-en": "use 16-bit Scratchpad as U8",
            "documentation-en": "Read write 16-bit scratchpad with U8 value",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch16/Scratch8"
        },
        {
            "name": "NI.Scratchpad16.I8",
            "description-en": "use 16-bit Scratchpad as I8",
            "documentation-en": "Read write 16-bit scratchpad with I8 value",
            "dataType": "Int32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch16/ScratchI8"
        },
        {
            "name": "NI.Scratchpad16.Bool",
            "description-en": "use 16-bit Scratchpad as Bool",
            "documentation-en": "Read write 16-bit scratchpad with Bool value",
            "dataType": "Bool",
            "access": "ReadWrite",
            "bitfield": "DebugScratch16/ScratchBool"
        },
        {
            "name": "NI.Scratchpad16.Double",
            "description-en": "use 16-bit Scratchpad as Double",
            "documentation-en": "Read write 16-bit scratchpad with Double value",
            "dataType": "Double",
            "access": "ReadWrite",
            "bitfield": "DebugScratch16/ScratchI16"
        },
        {
            "name": "NI.Scratchpad8.U8",
            "description-en": "use 8-bit Scratchpad as U8",
            "documentation-en": "Read write 8-bit scratchpad with U8 value",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch8/Scratch8"
        },
        {
            "name": "NI.Scratchpad8.I8",
            "description-en": "use 8-bit Scratchpad as I8",
            "documentation-en": "Read write 8-bit scratchpad with I8 value",
            "dataType": "Int32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch8/ScratchI8"
        },
        {
            "name": "NI.Scratchpad8.Bool",
            "description-en": "use 8-bit Scratchpad as Bool",
            "documentation-en": "Read write 8-bit scratchpad with Bool value",
            "dataType": "Bool",
            "access": "ReadWrite",
            "bitfield": "DebugScratch8/ScratchBool"
        },
        {
            "name": "NI.Scratchpad8.Double",
            "description-en": "use 8-bit Scratchpad as Double",
            "documentation-en": "Read write 8-bit scratchpad with Double value",
            "dataType": "Double",
            "access": "ReadWrite",
            "bitfield": "DebugScratch8/ScratchI8"
        },
        {
            "name": "NI.Debug.ScratchU32.Min10",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/Scratch32",
            "min": 10
        },
        {
            "name": "NI.Debug.ScratchU32.Max10",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/Scratch32",
            "max": 10
        },
        {
            "name": "NI.Debug.ScratchU32.Min10Max20",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/Scratch32",
            "min": 10,
            "max": 20
        },
        {
            "name": "NI.Debug.ScratchI32.Strict4",
            "dataType": "Int32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/ScratchI32",
            "scale": "TableStrict4Elements"
        },
        {
            "name": "NI.Debug.ScratchI32.Strict12",
            "dataType": "Int32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/ScratchI32",
            "scale": "TableStrict12Elements",
            "min": -2,
            "max": -1
        },
        // Scale properties used by Skynet test
        {
            "name": "NI.Debug.Scratch64.Int32.TableStrict12Elements",
            "dataType": "Int32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/ScratchI32",
            "scale": "TableStrict12Elements"
        },
        {
            "name": "NI.Debug.Scratch64.Int32.TableRound",
            "dataType": "Int32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/ScratchI32",
            "scale": "TableRound"
        },
        {
            "name": "NI.Debug.Scratch64.Int32.TableInterpolate",
            "dataType": "Int32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/ScratchI32",
            "scale": "TableInterpolate"
        },
        {
            "name": "NI.Debug.Scratch64.Int32.LinearDivideBy8",
            "dataType": "Int32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/ScratchI32",
            "scale": "LinearDivideBy8"
        },
        {
            "name": "NI.Debug.Scratch64.Int32.Times2Plus2",
            "dataType": "Int32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/ScratchI32",
            "scale": "Times2Plus2"
        },
        {
            "name": "NI.Debug.Scratch64.Int32.PolynomialThermocouple",
            "dataType": "Int32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/ScratchI32",
            "scale": "PolynomialThermocouple",
            "min": 0,
            "max": 760
        },
        {
            "name": "NI.Debug.Scratch64.Int32.PolynomialBoundaryConditions",
            "dataType": "Int32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/ScratchI32",
            "scale": "PolynomialBoundaryConditions"
        },
        {
            "name": "NI.Debug.Scratch32.Int32.TableStrict12Elements",
            "dataType": "Int32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/ScratchI32",
            "scale": "TableStrict12Elements"
        },
        {
            "name": "NI.Debug.Scratch32.Int32.TableRound",
            "dataType": "Int32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/ScratchI32",
            "scale": "TableRound"
        },
        {
            "name": "NI.Debug.Scratch32.Int32.TableInterpolate",
            "dataType": "Int32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/ScratchI32",
            "scale": "TableInterpolate"
        },
        {
            "name": "NI.Debug.Scratch32.Int32.LinearDivideBy8",
            "dataType": "Int32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/ScratchI32",
            "scale": "LinearDivideBy8"
        },
        {
            "name": "NI.Debug.Scratch32.Int32.Times2Plus2",
            "dataType": "Int32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/ScratchI32",
            "scale": "Times2Plus2"
        },
        {
            "name": "NI.Debug.Scratch32.Int32.PolynomialThermocouple",
            "dataType": "Int32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/ScratchI32",
            "scale": "PolynomialThermocouple",
            "min": 0,
            "max": 760
        },
        {
            "name": "NI.Debug.Scratch32.Int32.PolynomialBoundaryConditions",
            "dataType": "Int32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/ScratchI32",
            "scale": "PolynomialBoundaryConditions"
        },
        {
            "name": "NI.Debug.Scratch16.Int32.TableStrict12Elements",
            "dataType": "Int32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch16/ScratchI16",
            "scale": "TableStrict12Elements"
        },
        {
            "name": "NI.Debug.Scratch16.Int32.TableRound",
            "dataType": "Int32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch16/ScratchI16",
            "scale": "TableRound"
        },
        {
            "name": "NI.Debug.Scratch16.Int32.TableInterpolate",
            "dataType": "Int32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch16/ScratchI16",
            "scale": "TableInterpolate"
        },
        {
            "name": "NI.Debug.Scratch16.Int32.LinearDivideBy8",
            "dataType": "Int32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch16/ScratchI16",
            "scale": "LinearDivideBy8"
        },
        {
            "name": "NI.Debug.Scratch16.Int32.Times2Plus2",
            "dataType": "Int32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch16/ScratchI16",
            "scale": "Times2Plus2"
        },
        {
            "name": "NI.Debug.Scratch16.Int32.PolynomialThermocouple",
            "dataType": "Int32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch16/ScratchI16",
            "scale": "PolynomialThermocouple",
            "min": 0,
            "max": 760
        },
        {
            "name": "NI.Debug.Scratch16.Int32.PolynomialBoundaryConditions",
            "dataType": "Int32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch16/ScratchI16",
            "scale": "PolynomialBoundaryConditions"
        },
        {
            "name": "NI.Debug.Scratch8.Int32.TableStrict12Elements",
            "dataType": "Int32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch8/ScratchI8",
            "scale": "TableStrict12Elements"
        },
        {
            "name": "NI.Debug.Scratch8.Int32.TableRound",
            "dataType": "Int32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch8/ScratchI8",
            "scale": "TableRound"
        },
        {
            "name": "NI.Debug.Scratch8.Int32.TableInterpolate",
            "dataType": "Int32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch8/ScratchI8",
            "scale": "TableInterpolate"
        },
        {
            "name": "NI.Debug.Scratch8.Int32.LinearDivideBy8",
            "dataType": "Int32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch8/ScratchI8",
            "scale": "LinearDivideBy8"
        },
        {
            "name": "NI.Debug.Scratch8.Int32.Times2Plus2",
            "dataType": "Int32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch8/ScratchI8",
            "scale": "Times2Plus2"
        },
        {
            "name": "NI.Debug.Scratch8.Int32.PolynomialThermocouple",
            "dataType": "Int32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch8/ScratchI8",
            "scale": "PolynomialThermocouple",
            "min": 0,
            "max": 760
        },
        {
            "name": "NI.Debug.Scratch8.Int32.PolynomialBoundaryConditions",
            "dataType": "Int32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch8/ScratchI8",
            "scale": "PolynomialBoundaryConditions"
        },
        {
            "name": "NI.Debug.Scratch64.UInt32.TableStrict12Elements",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/Scratch32",
            "scale": "TableStrict12Elements"
        },
        {
            "name": "NI.Debug.Scratch64.UInt32.TableRound",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/Scratch32",
            "scale": "TableRound"
        },
        {
            "name": "NI.Debug.Scratch64.UInt32.TableInterpolate",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/Scratch32",
            "scale": "TableInterpolate"
        },
        {
            "name": "NI.Debug.Scratch64.UInt32.LinearDivideBy8",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/Scratch32",
            "scale": "LinearDivideBy8"
        },
        {
            "name": "NI.Debug.Scratch64.UInt32.Times2Plus2",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/Scratch32",
            "scale": "Times2Plus2"
        },
        {
            "name": "NI.Debug.Scratch64.UInt32.PolynomialThermocouple",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/Scratch32",
            "scale": "PolynomialThermocouple",
            "min": 0,
            "max": 760
        },
        {
            "name": "NI.Debug.Scratch64.UInt32.PolynomialBoundaryConditions",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/Scratch32",
            "scale": "PolynomialBoundaryConditions"
        },
        {
            "name": "NI.Debug.Scratch32.UInt32.TableStrict12Elements",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/Scratch32",
            "scale": "TableStrict12Elements"
        },
        {
            "name": "NI.Debug.Scratch32.UInt32.TableRound",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/Scratch32",
            "scale": "TableRound"
        },
        {
            "name": "NI.Debug.Scratch32.UInt32.TableInterpolate",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/Scratch32",
            "scale": "TableInterpolate"
        },
        {
            "name": "NI.Debug.Scratch32.UInt32.LinearDivideBy8",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/Scratch32",
            "scale": "LinearDivideBy8"
        },
        {
            "name": "NI.Debug.Scratch32.UInt32.Times2Plus2",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/Scratch32",
            "scale": "Times2Plus2"
        },
        {
            "name": "NI.Debug.Scratch32.UInt32.PolynomialThermocouple",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/Scratch32",
            "scale": "PolynomialThermocouple",
            "min": 0,
            "max": 760
        },
        {
            "name": "NI.Debug.Scratch32.UInt32.PolynomialBoundaryConditions",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/Scratch32",
            "scale": "PolynomialBoundaryConditions"
        },
        {
            "name": "NI.Debug.Scratch16.UInt32.TableStrict12Elements",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch16/Scratch16",
            "scale": "TableStrict12Elements"
        },
        {
            "name": "NI.Debug.Scratch16.UInt32.TableRound",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch16/Scratch16",
            "scale": "TableRound"
        },
        {
            "name": "NI.Debug.Scratch16.UInt32.TableInterpolate",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch16/Scratch16",
            "scale": "TableInterpolate"
        },
        {
            "name": "NI.Debug.Scratch16.UInt32.LinearDivideBy8",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch16/Scratch16",
            "scale": "LinearDivideBy8"
        },
        {
            "name": "NI.Debug.Scratch16.UInt32.Times2Plus2",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch16/Scratch16",
            "scale": "Times2Plus2"
        },
        {
            "name": "NI.Debug.Scratch16.UInt32.PolynomialThermocouple",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch16/Scratch16",
            "scale": "PolynomialThermocouple",
            "min": 0,
            "max": 760
        },
        {
            "name": "NI.Debug.Scratch16.UInt32.PolynomialBoundaryConditions",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch16/Scratch16",
            "scale": "PolynomialBoundaryConditions"
        },
        {
            "name": "NI.Debug.Scratch8.UInt32.TableStrict12Elements",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch8/Scratch8",
            "scale": "TableStrict12Elements"
        },
        {
            "name": "NI.Debug.Scratch8.UInt32.TableRound",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch8/Scratch8",
            "scale": "TableRound"
        },
        {
            "name": "NI.Debug.Scratch8.UInt32.TableInterpolate",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch8/Scratch8",
            "scale": "TableInterpolate"
        },
        {
            "name": "NI.Debug.Scratch8.UInt32.LinearDivideBy8",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch8/Scratch8",
            "scale": "LinearDivideBy8"
        },
        {
            "name": "NI.Debug.Scratch8.UInt32.Times2Plus2",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch8/Scratch8",
            "scale": "Times2Plus2"
        },
        {
            "name": "NI.Debug.Scratch8.UInt32.PolynomialThermocouple",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch8/Scratch8",
            "scale": "PolynomialThermocouple",
            "min": 0,
            "max": 760
        },
        {
            "name": "NI.Debug.Scratch8.UInt32.PolynomialBoundaryConditions",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "DebugScratch8/Scratch8",
            "scale": "PolynomialBoundaryConditions"
        },
        {
            "name": "NI.Debug.Scratch64.Int64.TableStrict12Elements",
            "dataType": "Int64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/ScratchI64",
            "scale": "TableStrict12Elements"
        },
        {
            "name": "NI.Debug.Scratch64.Int64.TableRound",
            "dataType": "Int64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/ScratchI64",
            "scale": "TableRound"
        },
        {
            "name": "NI.Debug.Scratch64.Int64.TableInterpolate",
            "dataType": "Int64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/ScratchI64",
            "scale": "TableInterpolate"
        },
        {
            "name": "NI.Debug.Scratch64.Int64.LinearDivideBy8",
            "dataType": "Int64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/ScratchI64",
            "scale": "LinearDivideBy8"
        },
        {
            "name": "NI.Debug.Scratch64.Int64.Times2Plus2",
            "dataType": "Int64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/ScratchI64",
            "scale": "Times2Plus2"
        },
        {
            "name": "NI.Debug.Scratch64.Int64.PolynomialThermocouple",
            "dataType": "Int64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/ScratchI64",
            "scale": "PolynomialThermocouple",
            "min": 0,
            "max": 760
        },
        {
            "name": "NI.Debug.Scratch64.Int64.PolynomialBoundaryConditions",
            "dataType": "Int64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/ScratchI64",
            "scale": "PolynomialBoundaryConditions"
        },
        {
            "name": "NI.Debug.Scratch32.Int64.TableStrict12Elements",
            "dataType": "Int64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/ScratchI32",
            "scale": "TableStrict12Elements"
        },
        {
            "name": "NI.Debug.Scratch32.Int64.TableRound",
            "dataType": "Int64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/ScratchI32",
            "scale": "TableRound"
        },
        {
            "name": "NI.Debug.Scratch32.Int64.TableInterpolate",
            "dataType": "Int64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/ScratchI32",
            "scale": "TableInterpolate"
        },
        {
            "name": "NI.Debug.Scratch32.Int64.LinearDivideBy8",
            "dataType": "Int64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/ScratchI32",
            "scale": "LinearDivideBy8"
        },
        {
            "name": "NI.Debug.Scratch32.Int64.Times2Plus2",
            "dataType": "Int64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/ScratchI32",
            "scale": "Times2Plus2"
        },
        {
            "name": "NI.Debug.Scratch32.Int64.PolynomialThermocouple",
            "dataType": "Int64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/ScratchI32",
            "scale": "PolynomialThermocouple",
            "min": 0,
            "max": 760
        },
        {
            "name": "NI.Debug.Scratch32.Int64.PolynomialBoundaryConditions",
            "dataType": "Int64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/ScratchI32",
            "scale": "PolynomialBoundaryConditions"
        },
        {
            "name": "NI.Debug.Scratch16.Int64.TableStrict12Elements",
            "dataType": "Int64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch16/ScratchI16",
            "scale": "TableStrict12Elements"
        },
        {
            "name": "NI.Debug.Scratch16.Int64.TableRound",
            "dataType": "Int64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch16/ScratchI16",
            "scale": "TableRound"
        },
        {
            "name": "NI.Debug.Scratch16.Int64.TableInterpolate",
            "dataType": "Int64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch16/ScratchI16",
            "scale": "TableInterpolate"
        },
        {
            "name": "NI.Debug.Scratch16.Int64.LinearDivideBy8",
            "dataType": "Int64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch16/ScratchI16",
            "scale": "LinearDivideBy8"
        },
        {
            "name": "NI.Debug.Scratch16.Int64.Times2Plus2",
            "dataType": "Int64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch16/ScratchI16",
            "scale": "Times2Plus2"
        },
        {
            "name": "NI.Debug.Scratch16.Int64.PolynomialThermocouple",
            "dataType": "Int64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch16/ScratchI16",
            "scale": "PolynomialThermocouple",
            "min": 0,
            "max": 760
        },
        {
            "name": "NI.Debug.Scratch16.Int64.PolynomialBoundaryConditions",
            "dataType": "Int64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch16/ScratchI16",
            "scale": "PolynomialBoundaryConditions"
        },
        {
            "name": "NI.Debug.Scratch8.Int64.TableStrict12Elements",
            "dataType": "Int64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch8/ScratchI8",
            "scale": "TableStrict12Elements"
        },
        {
            "name": "NI.Debug.Scratch8.Int64.TableRound",
            "dataType": "Int64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch8/ScratchI8",
            "scale": "TableRound"
        },
        {
            "name": "NI.Debug.Scratch8.Int64.TableInterpolate",
            "dataType": "Int64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch8/ScratchI8",
            "scale": "TableInterpolate"
        },
        {
            "name": "NI.Debug.Scratch8.Int64.LinearDivideBy8",
            "dataType": "Int64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch8/ScratchI8",
            "scale": "LinearDivideBy8"
        },
        {
            "name": "NI.Debug.Scratch8.Int64.Times2Plus2",
            "dataType": "Int64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch8/ScratchI8",
            "scale": "Times2Plus2"
        },
        {
            "name": "NI.Debug.Scratch8.Int64.PolynomialThermocouple",
            "dataType": "Int64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch8/ScratchI8",
            "scale": "PolynomialThermocouple",
            "min": 0,
            "max": 760
        },
        {
            "name": "NI.Debug.Scratch8.Int64.PolynomialBoundaryConditions",
            "dataType": "Int64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch8/ScratchI8",
            "scale": "PolynomialBoundaryConditions"
        },
        {
            "name": "NI.Debug.Scratch64.UInt64.TableStrict12Elements",
            "dataType": "UInt64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/Scratch64",
            "scale": "TableStrict12Elements"
        },
        {
            "name": "NI.Debug.Scratch64.UInt64.TableRound",
            "dataType": "UInt64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/Scratch64",
            "scale": "TableRound"
        },
        {
            "name": "NI.Debug.Scratch64.UInt64.TableInterpolate",
            "dataType": "UInt64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/Scratch64",
            "scale": "TableInterpolate"
        },
        {
            "name": "NI.Debug.Scratch64.UInt64.LinearDivideBy8",
            "dataType": "UInt64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/Scratch64",
            "scale": "LinearDivideBy8"
        },
        {
            "name": "NI.Debug.Scratch64.UInt64.Times2Plus2",
            "dataType": "UInt64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/Scratch64",
            "scale": "Times2Plus2"
        },
        {
            "name": "NI.Debug.Scratch64.UInt64.PolynomialThermocouple",
            "dataType": "UInt64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/Scratch64",
            "scale": "PolynomialThermocouple",
            "min": 0,
            "max": 760
        },
        {
            "name": "NI.Debug.Scratch64.UInt64.PolynomialBoundaryConditions",
            "dataType": "UInt64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/Scratch64",
            "scale": "PolynomialBoundaryConditions"
        },
        {
            "name": "NI.Debug.Scratch32.UInt64.TableStrict12Elements",
            "dataType": "UInt64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/Scratch32",
            "scale": "TableStrict12Elements"
        },
        {
            "name": "NI.Debug.Scratch32.UInt64.TableRound",
            "dataType": "UInt64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/Scratch32",
            "scale": "TableRound"
        },
        {
            "name": "NI.Debug.Scratch32.UInt64.TableInterpolate",
            "dataType": "UInt64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/Scratch32",
            "scale": "TableInterpolate"
        },
        {
            "name": "NI.Debug.Scratch32.UInt64.LinearDivideBy8",
            "dataType": "UInt64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/Scratch32",
            "scale": "LinearDivideBy8"
        },
        {
            "name": "NI.Debug.Scratch32.UInt64.Times2Plus2",
            "dataType": "UInt64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/Scratch32",
            "scale": "Times2Plus2"
        },
        {
            "name": "NI.Debug.Scratch32.UInt64.PolynomialThermocouple",
            "dataType": "UInt64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/Scratch32",
            "scale": "PolynomialThermocouple",
            "min": 0,
            "max": 760
        },
        {
            "name": "NI.Debug.Scratch32.UInt64.PolynomialBoundaryConditions",
            "dataType": "UInt64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/Scratch32",
            "scale": "PolynomialBoundaryConditions"
        },
        {
            "name": "NI.Debug.Scratch16.UInt64.TableStrict12Elements",
            "dataType": "UInt64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch16/Scratch16",
            "scale": "TableStrict12Elements"
        },
        {
            "name": "NI.Debug.Scratch16.UInt64.TableRound",
            "dataType": "UInt64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch16/Scratch16",
            "scale": "TableRound"
        },
        {
            "name": "NI.Debug.Scratch16.UInt64.TableInterpolate",
            "dataType": "UInt64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch16/Scratch16",
            "scale": "TableInterpolate"
        },
        {
            "name": "NI.Debug.Scratch16.UInt64.LinearDivideBy8",
            "dataType": "UInt64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch16/Scratch16",
            "scale": "LinearDivideBy8"
        },
        {
            "name": "NI.Debug.Scratch16.UInt64.Times2Plus2",
            "dataType": "UInt64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch16/Scratch16",
            "scale": "Times2Plus2"
        },
        {
            "name": "NI.Debug.Scratch16.UInt64.PolynomialThermocouple",
            "dataType": "UInt64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch16/Scratch16",
            "scale": "PolynomialThermocouple",
            "min": 0,
            "max": 760
        },
        {
            "name": "NI.Debug.Scratch16.UInt64.PolynomialBoundaryConditions",
            "dataType": "UInt64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch16/Scratch16",
            "scale": "PolynomialBoundaryConditions"
        },
        {
            "name": "NI.Debug.Scratch8.UInt64.TableStrict12Elements",
            "dataType": "UInt64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch8/Scratch8",
            "scale": "TableStrict12Elements"
        },
        {
            "name": "NI.Debug.Scratch8.UInt64.TableRound",
            "dataType": "UInt64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch8/Scratch8",
            "scale": "TableRound"
        },
        {
            "name": "NI.Debug.Scratch8.UInt64.TableInterpolate",
            "dataType": "UInt64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch8/Scratch8",
            "scale": "TableInterpolate"
        },
        {
            "name": "NI.Debug.Scratch8.UInt64.LinearDivideBy8",
            "dataType": "UInt64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch8/Scratch8",
            "scale": "LinearDivideBy8"
        },
        {
            "name": "NI.Debug.Scratch8.UInt64.Times2Plus2",
            "dataType": "UInt64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch8/Scratch8",
            "scale": "Times2Plus2"
        },
        {
            "name": "NI.Debug.Scratch8.UInt64.PolynomialThermocouple",
            "dataType": "UInt64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch8/Scratch8",
            "scale": "PolynomialThermocouple",
            "min": 0,
            "max": 760
        },
        {
            "name": "NI.Debug.Scratch8.UInt64.PolynomialBoundaryConditions",
            "dataType": "UInt64",
            "access": "ReadWrite",
            "bitfield": "DebugScratch8/Scratch8",
            "scale": "PolynomialBoundaryConditions"
        },
        {
            "name": "NI.Debug.Scratch64.Double.TableStrict",
            "dataType": "Double",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/ScratchI64",
            "scale": "TableStrict"
        },
        {
            "name": "NI.Debug.Scratch64.Double.TableStrict12Elements",
            "dataType": "Double",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/ScratchI64",
            "scale": "TableStrict12Elements"
        },
        {
            "name": "NI.Debug.Scratch64.Double.TableRound",
            "dataType": "Double",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/ScratchI64",
            "scale": "TableRound"
        },
        {
            "name": "NI.Debug.Scratch64.Double.TableInterpolate",
            "dataType": "Double",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/ScratchI64",
            "scale": "TableInterpolate"
        },
        {
            "name": "NI.Debug.Scratch64.Double.LinearDivideBy8",
            "dataType": "Double",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/ScratchI64",
            "scale": "LinearDivideBy8"
        },
        {
            "name": "NI.Debug.Scratch64.Double.Times2Plus2",
            "dataType": "Double",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/ScratchI64",
            "scale": "Times2Plus2"
        },
        {
            "name": "NI.Debug.Scratch64.Double.PolynomialThermocouple",
            "dataType": "Double",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/ScratchI64",
            "scale": "PolynomialThermocouple",
            "min": 0,
            "max": 760
        },
        {
            "name": "NI.Debug.Scratch64.Double.PolynomialBoundaryConditions",
            "dataType": "Double",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/ScratchI64",
            "scale": "PolynomialBoundaryConditions"
        },
        {
            "name": "NI.Debug.Scratch32.Double.TableStrict",
            "dataType": "Double",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/ScratchI32",
            "scale": "TableStrict"
        },
        {
            "name": "NI.Debug.Scratch32.Double.TableStrict12Elements",
            "dataType": "Double",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/ScratchI32",
            "scale": "TableStrict12Elements"
        },
        {
            "name": "NI.Debug.Scratch32.Double.TableRound",
            "dataType": "Double",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/ScratchI32",
            "scale": "TableRound"
        },
        {
            "name": "NI.Debug.Scratch32.Double.TableInterpolate",
            "dataType": "Double",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/ScratchI32",
            "scale": "TableInterpolate"
        },
        {
            "name": "NI.Debug.Scratch32.Double.LinearDivideBy8",
            "dataType": "Double",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/ScratchI32",
            "scale": "LinearDivideBy8"
        },
        {
            "name": "NI.Debug.Scratch32.Double.Times2Plus2",
            "dataType": "Double",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/ScratchI32",
            "scale": "Times2Plus2"
        },
        {
            "name": "NI.Debug.Scratch32.Double.PolynomialThermocouple",
            "dataType": "Double",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/ScratchI32",
            "scale": "PolynomialThermocouple",
            "min": 0,
            "max": 760
        },
        {
            "name": "NI.Debug.Scratch32.Double.PolynomialBoundaryConditions",
            "dataType": "Double",
            "access": "ReadWrite",
            "bitfield": "DebugScratch32/ScratchI32",
            "scale": "PolynomialBoundaryConditions"
        },
        {
            "name": "NI.Debug.Scratch16.Double.TableStrict",
            "dataType": "Double",
            "access": "ReadWrite",
            "bitfield": "DebugScratch16/ScratchI16",
            "scale": "TableStrict"
        },
        {
            "name": "NI.Debug.Scratch16.Double.TableStrict12Elements",
            "dataType": "Double",
            "access": "ReadWrite",
            "bitfield": "DebugScratch16/ScratchI16",
            "scale": "TableStrict12Elements"
        },
        {
            "name": "NI.Debug.Scratch16.Double.TableRound",
            "dataType": "Double",
            "access": "ReadWrite",
            "bitfield": "DebugScratch16/ScratchI16",
            "scale": "TableRound"
        },
        {
            "name": "NI.Debug.Scratch16.Double.TableInterpolate",
            "dataType": "Double",
            "access": "ReadWrite",
            "bitfield": "DebugScratch16/ScratchI16",
            "scale": "TableInterpolate"
        },
        {
            "name": "NI.Debug.Scratch16.Double.LinearDivideBy8",
            "dataType": "Double",
            "access": "ReadWrite",
            "bitfield": "DebugScratch16/ScratchI16",
            "scale": "LinearDivideBy8"
        },
        {
            "name": "NI.Debug.Scratch16.Double.Times2Plus2",
            "dataType": "Double",
            "access": "ReadWrite",
            "bitfield": "DebugScratch16/ScratchI16",
            "scale": "Times2Plus2"
        },
        {
            "name": "NI.Debug.Scratch16.Double.PolynomialThermocouple",
            "dataType": "Double",
            "access": "ReadWrite",
            "bitfield": "DebugScratch16/ScratchI16",
            "scale": "PolynomialThermocouple",
            "min": 0,
            "max": 760
        },
        {
            "name": "NI.Debug.Scratch16.Double.PolynomialBoundaryConditions",
            "dataType": "Double",
            "access": "ReadWrite",
            "bitfield": "DebugScratch16/ScratchI16",
            "scale": "PolynomialBoundaryConditions"
        },
        {
            "name": "NI.Debug.Scratch8.Double.TableStrict",
            "dataType": "Double",
            "access": "ReadWrite",
            "bitfield": "DebugScratch8/ScratchI8",
            "scale": "TableStrict"
        },
        {
            "name": "NI.Debug.Scratch8.Double.TableStrict12Elements",
            "dataType": "Double",
            "access": "ReadWrite",
            "bitfield": "DebugScratch8/ScratchI8",
            "scale": "TableStrict12Elements"
        },
        {
            "name": "NI.Debug.Scratch8.Double.TableRound",
            "dataType": "Double",
            "access": "ReadWrite",
            "bitfield": "DebugScratch8/ScratchI8",
            "scale": "TableRound"
        },
        {
            "name": "NI.Debug.Scratch8.Double.TableInterpolate",
            "dataType": "Double",
            "access": "ReadWrite",
            "bitfield": "DebugScratch8/ScratchI8",
            "scale": "TableInterpolate"
        },
        {
            "name": "NI.Debug.Scratch8.Double.LinearDivideBy8",
            "dataType": "Double",
            "access": "ReadWrite",
            "bitfield": "DebugScratch8/ScratchI8",
            "scale": "LinearDivideBy8"
        },
        {
            "name": "NI.Debug.Scratch8.Double.Times2Plus2",
            "dataType": "Double",
            "access": "ReadWrite",
            "bitfield": "DebugScratch8/ScratchI8",
            "scale": "Times2Plus2"
        },
        {
            "name": "NI.Debug.Scratch8.Double.PolynomialThermocouple",
            "dataType": "Double",
            "access": "ReadWrite",
            "bitfield": "DebugScratch8/ScratchI8",
            "scale": "PolynomialThermocouple",
            "min": 0,
            "max": 760
        },
        {
            "name": "NI.Debug.Scratch8.Double.PolynomialBoundaryConditions",
            "dataType": "Double",
            "access": "ReadWrite",
            "bitfield": "DebugScratch8/ScratchI8",
            "scale": "PolynomialBoundaryConditions"
        },
        {
            "name": "NI.Debug.ScratchBool.InvertBoolean",
            "dataType": "Bool",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/ScratchBool",
            "scale": "InvertBoolean"
        },
        {
            "name": "NI.Debug.ScratchBool.TableStrictTrueFalse",
            "dataType": "Bool",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/Scratch64",
            "scale": "TableStrictTrueFalse"
        },
        {
            "name": "NI.Debug.ScratchBool.TableStrictFalse",
            "dataType": "Bool",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/Scratch64",
            "scale": "TableStrictFalse"
        },
        {
            "name": "NI.Debug.ScratchBool.TableStrictTrue",
            "dataType": "Bool",
            "access": "ReadWrite",
            "bitfield": "DebugScratch64/Scratch64",
            "scale": "TableStrictTrue"
        },
        {
            "name": "NI.GreenLED0",
            "description-en": "one of 3 tri-colored LEDs (red/green/amber), controls green",
            "documentation-en": "towards front of module, at the top, left LED",
            "dataType": "Bool",
            "access": "WriteOnly",
            "bitfield": "FrontPanelLeds/LedGreen0Enable"
        },
        {
            "name": "NI.GreenLED1",
            "description-en": "one of 3 tri-colored LEDs (red/green/amber), controls green",
            "documentation-en": "towards front of module, at the top, center LED",
            "dataType": "Bool",
            "access": "WriteOnly",
            "bitfield": "FrontPanelLeds/LedGreen1Enable"
        },
        {
            "name": "NI.GreenLED2",
            "description-en": "one of 3 tri-colored LEDs (red/green/amber), controls green",
            "documentation-en": "towards front of module, at the top, right LED",
            "dataType": "Bool",
            "access": "WriteOnly",
            "bitfield": "FrontPanelLeds/LedGreen2Enable"
        },
        {
            "name": "NI.RedLED0",
            "description-en": "one of 3 tri-colored LEDs (red/green/amber), controls red",
            "documentation-en": "towards front of module, at the top, left LED",
            "dataType": "Bool",
            "access": "WriteOnly",
            "bitfield": "FrontPanelLeds/LedRed0Enable"
        },
        {
            "name": "NI.RedLED1",
            "description-en": "one of 3 tri-colored LEDs (red/green/amber), controls red",
            "documentation-en": "towards front of module, at the top, center LED",
            "dataType": "Bool",
            "access": "WriteOnly",
            "bitfield": "FrontPanelLeds/LedRed1Enable"
        },
        {
            "name": "NI.RedLED2",
            "description-en": "one of 3 tri-colored LEDs (red/green/amber), controls red",
            "documentation-en": "towards front of module, at the top, right LED",
            "dataType": "Bool",
            "access": "WriteOnly",
            "bitfield": "FrontPanelLeds/LedRed2Enable"
        },
        {
            "name": "NI.EventCounter0",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "EventCounter0/DelayInMilliseconds",
            "max": 255
        },
        {
            "name": "NI.EventCounter1",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "EventCounter1/DelayInMilliseconds",
            "max": 255
        },
        {
            "name": "NI.EventCounter2",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "EventCounter2/DelayInMilliseconds",
            "max": 255
        },
        {
            "name": "NI.EventCounter3",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "EventCounter3/DelayInMilliseconds",
            "max": 255
        },
        {
            "name": "NI.EventCounter0.DelayInMs",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "EventCounter0/DelayInMilliseconds",
            "max": 255
        },
        {
            "name": "NI.EventCounter1.DelayInMs",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "EventCounter1/DelayInMilliseconds",
            "max": 255
        },
        {
            "name": "NI.EventCounter2.DelayInMs",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "EventCounter2/DelayInMilliseconds",
            "max": 255
        },
        {
            "name": "NI.EventCounter3.DelayInMs",
            "dataType": "UInt32",
            "access": "ReadWrite",
            "bitfield": "EventCounter3/DelayInMilliseconds",
            "max": 255
        },
        {
            "name": "NI.EventCounter0.DelayInSec",
            "dataType": "Double",
            "access": "ReadWrite",
            "bitfield": "EventCounter0/DelayInMilliseconds",
            "scale": "LinearMillisecondToSecond",
            "min": 0.0,
            "max": 0.255
        },
        {
            "name": "NI.EventCounter1.DelayInSec",
            "dataType": "Double",
            "access": "ReadWrite",
            "bitfield": "EventCounter1/DelayInMilliseconds",
            "scale": "LinearMillisecondToSecond",
            "min": 0.0,
            "max": 0.255
        },
        {
            "name": "NI.EventCounter2.DelayInSec",
            "dataType": "Double",
            "access": "ReadWrite",
            "bitfield": "EventCounter2/DelayInMilliseconds",
            "scale": "LinearMillisecondToSecond",
            "min": 0.0,
            "max": 0.255
        },
        {
            "name": "NI.EventCounter3.DelayInSec",
            "dataType": "Double",
            "access": "ReadWrite",
            "bitfield": "EventCounter3/DelayInMilliseconds",
            "scale": "LinearMillisecondToSecond",
            "min": 0.0,
            "max": 0.255
        },
        {
            "name": "NI.EventCounter0.DelayEnum",
            "dataType": "NI.EventDelay",
            "access": "ReadWrite",
            "bitfield": "EventCounter0/DelayInMilliseconds"
        },
        {
            "name": "NI.EventCounter1.DelayEnum",
            "dataType": "NI.EventDelay",
            "access": "ReadWrite",
            "bitfield": "EventCounter1/DelayInMilliseconds"
        },
        {
            "name": "NI.EventCounter2.DelayEnum",
            "dataType": "NI.EventDelay",
            "access": "ReadWrite",
            "bitfield": "EventCounter2/DelayInMilliseconds"
        },
        {
            "name": "NI.EventCounter3.DelayEnum",
            "dataType": "NI.EventDelay",
            "access": "ReadWrite",
            "bitfield": "EventCounter3/DelayInMilliseconds"
        },
        {
            "name": "NI.PropertyMinCapsSpecVerTest_OlderVersion",
            "minCapsSpecVersion" : 1,
            "dataType": "String",
            "value": "PropertyMinCapsSpecVerTest"
        },
        {
            "name": "NI.PropertyMinCapsSpecVerTest_CurrentVersion",
            "minCapsSpecVersion" : 2,
            "dataType": "String",
            "value": "PropertyMinCapsSpecVerTest"
        },
        {
            "name": "NI.PropertyMinCapsSpecVerTest_NewerVersion",
            "minCapsSpecVersion" : 3,
            "dataType": "String",
            "value": "PropertyMinCapsSpecVerTest"
        },
        {
            "name": "NI.PropertyMaxCapsSpecVerTest_OlderVersion",
            "maxCapsSpecVersion" : 1,
            "dataType": "String",
            "value": "PropertyMaxCapsSpecVerTest"
        },
        {
            "name": "NI.PropertyMaxCapsSpecVerTest_CurrentVersion",
            "maxCapsSpecVersion" : 2,
            "dataType": "String",
            "value": "PropertyMaxCapsSpecVerTest"
        },
        {
            "name": "NI.PropertyMaxCapsSpecVerTest_NewerVersion",
            "maxCapsSpecVersion" : 3,
            "dataType": "String",
            "value": "PropertyMaxCapsSpecVerTest"
        }
    ]
}
